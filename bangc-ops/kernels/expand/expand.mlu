/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/kernel.h"
#include "mlu_op_kernel.h"

__mlu_global__ void MLUUnion1KernelExpandTensor(
    void *input, void *output, int32_t input_1, int32_t input_2,
    int32_t input_3, int32_t input_4, int32_t input_5, int32_t input_6,
    int32_t input_7, int32_t input_8, int32_t output_1, int32_t output_2,
    int32_t output_3, int32_t output_4, int32_t output_5, int32_t output_6,
    int32_t output_7, int32_t output_8, int dtype_size);

__mlu_global__ void MLUUnion1KernelExpandOneDim(void *input, void *output,
                                                int32_t high_num,
                                                int32_t expand_num,
                                                int32_t low_num,
                                                int dtype_size);

void MLUOP_WIN_API mluOpUnion1KernelExpandTensor(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *input, void *output, const int input_1, const int input_2,
    const int input_3, const int input_4, const int input_5, const int input_6,
    const int input_7, const int input_8, const int output_1,
    const int output_2, const int output_3, const int output_4,
    const int output_5, const int output_6, const int output_7,
    const int output_8, const int dtype_size) {
  MLUUnion1KernelExpandTensor<<<k_dim, k_type, queue>>>(
      (void *)input, (void *)output, input_1, input_2, input_3, input_4,
      input_5, input_6, input_7, input_8, output_1, output_2, output_3,
      output_4, output_5, output_6, output_7, output_8, dtype_size);
}

void MLUOP_WIN_API mluOpUnion1KernelExpandOneDim(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *input, void *output, const int high_num, const int expand_num,
    const int low_num, const int dtype_size) {
  MLUUnion1KernelExpandOneDim<<<k_dim, k_type, queue>>>(
      (void *)input, (void *)output, high_num, expand_num, low_num, dtype_size);
}
