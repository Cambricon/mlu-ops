/*************************************************************************
 * Copyright (C) 2021 by Cambricon, Inc. All rights reserved.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "core/context.h"
#include "core/logging.h"
#include "core/runtime/device.h"
#include "core/tensor.h"
#include "core/type.h"
#include "kernels/unary_op/unary_op_host.h"
#include "mlu_op.h"
#include "log.h"

mluOpStatus_t MLUOP_WIN_API mluOpLog(mluOpHandle_t handle,
                                     const mluOpComputationPreference_t prefer,
                                     const mluOpLogBase_t base,
                                     const mluOpTensorDescriptor_t x_desc,
                                     const void *x,
                                     const mluOpTensorDescriptor_t y_desc,
                                     void *y) {
  mluOpDataType_t support_type[2] = {MLUOP_DTYPE_HALF, MLUOP_DTYPE_FLOAT};
  bool zero_element = false;
  mluOpStatus_t param_check =
      unaryOpParamCheck("[mluOpLog]", handle, x_desc, x, y_desc, y, support_type, 2, zero_element);
  if (param_check != MLUOP_STATUS_SUCCESS) {
    return param_check;
  }
  if (zero_element == true) {
    return MLUOP_STATUS_SUCCESS;
  }

  cnrtFunctionType_t k_type;
  cnrtDim3_t k_dim;
  unaryOpPolicyFunc(handle, x_desc, &k_dim, &k_type);
  VLOG(5) << "[mluOp] Launch [" << k_type << ", " << k_dim.x << ", " << k_dim.y << ", " << k_dim.z
          << "]";

  float coef = 1.0;
  if (base == mluOpLogBase_t::MLUOP_LOG_E) {
    coef = 1.0;
  } else if (base == mluOpLogBase_t::MLUOP_LOG_2) {
    // log2(x) = loge(x) * log2(e)
    coef = log2(exp(1));
  } else if (base == mluOpLogBase_t::MLUOP_LOG_10) {
    // log10(x) = loge(x) * log10(e)
    coef = log10(exp(1));
  }

  size_t element_num = mluOpGetTensorElementNum(x_desc);

  void (*MLUBlockKernelUnary)(void *x, void *y, uint32_t element_num, float coef);
  MLUBlockKernelUnary = NULL;
  if (handle->arch == MLUOP_MLU270) {
    if (x_desc->dtype == MLUOP_DTYPE_FLOAT) {
      VLOG(5) << "kernel MLUBlockKernel5StagePipelineLogfloatFast";
      MLUBlockKernelUnary = MLUBlockKernel5StagePipelineLogfloatFast;
    } else {
      if (prefer == MLUOP_COMPUTATION_FAST) {
        VLOG(5) << "kernel MLUBlockKernel5StagePipelineLoghalfFast";
        MLUBlockKernelUnary = MLUBlockKernel5StagePipelineLoghalfFast;
      } else {
        VLOG(5) << "kernel MLUBlockKernel5StagePipelineLoghalfHighAcc";
        MLUBlockKernelUnary = MLUBlockKernel5StagePipelineLoghalfHighAcc;
      }
    }
  } else {
    if (x_desc->dtype == MLUOP_DTYPE_FLOAT) {
      VLOG(5) << "kernel MLUBlockKernel3StagePipelineLogfloatFast";
      MLUBlockKernelUnary = MLUBlockKernel3StagePipelineLogfloatFast;
    } else {
      if (prefer == MLUOP_COMPUTATION_FAST) {
        VLOG(5) << "kernel MLUBlockKernel3StagePipelineLoghalfFast";
        MLUBlockKernelUnary = MLUBlockKernel3StagePipelineLoghalfFast;
      } else {
        VLOG(5) << "kernel MLUBlockKernel3StagePipelineLoghalfHighAcc";
        MLUBlockKernelUnary = MLUBlockKernel3StagePipelineLoghalfHighAcc;
      }
    }
  }
  KERNEL_CHECK(
      (MLUBlockKernelUnary<<<k_dim, k_type, handle->queue>>>((void *)x, y, element_num, coef)));
  return MLUOP_STATUS_SUCCESS;
}
