/*************************************************************************
 * Copyright (C) 2021 by Cambricon, Inc. All rights reserved.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/unary_op/unary_op_3pipeline.h"
#include "kernels/unary_op/unary_op_5pipeline.h"

#define SQRT_HIGH_BOUND 1e4
#define SQRT_SCALE 1e-6
#define SQRT_RECOVER 1e3

#define SQRT_NRAM_USED MAX_NRAM_SIZE
#define SQRT_SRAM_USED (CORE_DIM * SQRT_NRAM_USED)

__nram__ float nram_tmp[NFU_ALIGN_SIZE];
__nram__ char nram_buffer[SQRT_NRAM_USED];
__mlu_shared__ char sram_buffer[SQRT_SRAM_USED];

template <typename T>
__mlu_func__ void get3OffsetSqrtHighAcc(int32_t &offset_x_half,
                                        int32_t &offset_aux_a,
                                        int32_t &offset_aux_b,
                                        int32_t &num_deal,
                                        int32_t &num_pong) {
  // need 4 pingpong sapce.
  num_deal = FLOOR_ALIGN(SQRT_NRAM_USED / sizeof(T) / 4, UNARY_ALIGN_NUM);
  num_pong = 2 * num_deal;
  offset_x_half = num_deal;
  offset_aux_a = 2 * num_pong;
  offset_aux_b = offset_aux_a;
}

template <typename T>
__mlu_func__ void get3OffsetSqrtFast(int32_t &offset_x_half,
                                     int32_t &offset_aux_a,
                                     int32_t &offset_aux_b,
                                     int32_t &num_deal,
                                     int32_t &num_pong) {
  if (sizeof(T) == sizeof(float)) {
    // need 2 auxiliary space and 2 pingpong sapce,
    // use 2 auxiliary space to expand input range for float data type.
    num_deal = FLOOR_ALIGN(SQRT_NRAM_USED / sizeof(T) / 4, UNARY_ALIGN_NUM);
    num_pong = num_deal;
    offset_x_half = 0;
    offset_aux_a = 2 * num_pong;
    offset_aux_b = offset_aux_a + num_deal;
  } else {
    // need 2 pingpong sapce,
    num_deal = FLOOR_ALIGN(SQRT_NRAM_USED / sizeof(T) / 2, UNARY_ALIGN_NUM);
    num_pong = num_deal;
    offset_x_half = 0;
    offset_aux_a = 2 * num_pong;
    offset_aux_b = offset_aux_a;
  }
}

template <typename T>
__mlu_func__ void computeSqrtFast(T *nram_x,
                                  T *nram_x_half,
                                  T *nram_aux_a,
                                  T *nram_aux_b,
                                  int deal_num,
                                  int actual_num,
                                  float coef) {
  if (sizeof(T) == sizeof(float)) {
    __nramset((float *)nram_tmp, UNARY_ALIGN_NUM, (float)SQRT_HIGH_BOUND);
    // scale x
    __bang_cycle_lt((float *)nram_aux_a, (float *)nram_x_half, (float *)nram_tmp, deal_num,
                    UNARY_ALIGN_NUM);
    __bang_mul_const(nram_aux_a, nram_aux_a, (float)(1 - SQRT_SCALE), deal_num);
    __bang_add_const(nram_aux_a, nram_aux_a, (float)SQRT_SCALE, deal_num);
    // recover x
    __bang_cycle_lt((float *)nram_aux_b, (float *)nram_x_half, (float *)nram_tmp, deal_num,
                    UNARY_ALIGN_NUM);
    __bang_mul_const(nram_aux_b, nram_aux_b, (float)(1 - SQRT_RECOVER), deal_num);
    __bang_add_const(nram_aux_b, nram_aux_b, (float)SQRT_RECOVER, deal_num);
    // sqrt x
    __bang_mul(nram_x, nram_x_half, nram_aux_a, deal_num);
    __bang_active_sqrthp(nram_x, nram_x, deal_num);
    __bang_mul(nram_x, nram_x, nram_aux_b, deal_num);
  } else {
    __bang_active_sqrthp(nram_x, nram_x_half, deal_num);
  }
}

template <typename T>
__mlu_func__ void get5OffsetSqrtHighAcc(int32_t &offset_x_half,
                                        int32_t &offset_aux_a,
                                        int32_t &offset_aux_b,
                                        int32_t &num_deal) {
  // need 2 nram space.
  int32_t num_nram_div = 2;
  num_deal = FLOOR_ALIGN(SQRT_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div, UNARY_ALIGN_NUM);
  offset_x_half = num_deal;
  offset_aux_a = offset_x_half;
  offset_aux_b = offset_x_half;
}

template <typename T>
__mlu_func__ void get5OffsetSqrtFast(int32_t &offset_x_half,
                                     int32_t &offset_aux_a,
                                     int32_t &offset_aux_b,
                                     int32_t &num_deal) {
  int32_t num_nram_div = 1;
  if (sizeof(T) == sizeof(float)) {
    // need 2 auxiliary space to expand input range for float data type in MLU200 series.
    num_nram_div = num_nram_div + 2;
    num_deal =
        FLOOR_ALIGN(SQRT_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div, UNARY_ALIGN_NUM);
    offset_x_half = 0;
    offset_aux_a = num_deal;
    offset_aux_b = offset_aux_a + num_deal;
  } else {
    // need 1 nram space.
    num_deal =
        FLOOR_ALIGN(SQRT_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div, UNARY_ALIGN_NUM);
    offset_x_half = 0;
    offset_aux_a = offset_x_half;
    offset_aux_b = offset_aux_a;
  }
}

template <typename T>
__mlu_func__ void computeSqrtHighAcc(T *nram_x,
                                     T *nram_x_half,
                                     T *nram_aux_a,
                                     T *nram_aux_b,
                                     int deal_num,
                                     int actual_num,
                                     float coef) {
  __bang_half2float((float *)nram_x, (half *)nram_x_half, deal_num);
  __bang_active_sqrthp((float *)nram_x, (float *)nram_x, deal_num);
  __bang_float2half_rd((half *)nram_x, (float *)nram_x, deal_num);
}

// function implementation
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Sqrt, float, Fast);
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Sqrt, half, Fast);
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Sqrt, half, HighAcc);

UNARY_OP_KERNEL_5PIPELINE_IMPLE(Sqrt, float, Fast);
UNARY_OP_KERNEL_5PIPELINE_IMPLE(Sqrt, half, Fast);
UNARY_OP_KERNEL_5PIPELINE_IMPLE(Sqrt, half, HighAcc);
