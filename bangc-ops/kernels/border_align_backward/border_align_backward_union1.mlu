/*************************************************************************
 * Copyright (C) [2023] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "border_align_backward.h"

#include "core/logging.h"
#include "kernels/kernel.h"
#include "kernels/debug.h"
#include "kernels/utils/common.h"

__nram__ char nram_buffer[MAX_NRAM_SIZE];

#define CALCULATE_GRAD_INPUT(w, x, y)                                         \
  const int32_t offset_##w =                                                  \
      n * H * W * C * 4 + y * W * C * 4 + x * C * 4 + border * C + c;         \
  __bang_mul_scalar(nram_grad_input, nram_grad_output, w, deal_num_align);    \
  __bang_band((char *)nram_grad_input, (char *)nram_grad_input, (char *)mask, \
              sizeof(T) * deal_num_align);                                    \
  __bang_atomic_reduce_add(grad_input + offset_##w, nram_grad_input, deal_num);

template <typename T>
__mlu_func__ void computeGradInput(
    T *nram_grad_input, T *nram_grad_output, T *grad_input, T *mask, const T w1,
    const T w2, const T w3, const T w4, const int32_t x_low,
    const int32_t y_low, const int32_t x_high, const int32_t y_high,
    const int32_t C, const int32_t c, const int32_t W, const int32_t n,
    const int32_t H, const int32_t border, const int32_t deal_num,
    const int32_t deal_num_align) {
  CALCULATE_GRAD_INPUT(w1, x_low, y_low);
  CALCULATE_GRAD_INPUT(w2, x_high, y_low);
  CALCULATE_GRAD_INPUT(w3, x_low, y_high);
  CALCULATE_GRAD_INPUT(w4, x_high, y_high);
}

template <typename T>
__mlu_func__ void bilinearInterpolate(const int32_t input_height,
                                      const int32_t input_width, T y, T x,
                                      T *w1, T *w2, T *w3, T *w4,
                                      int32_t *x_low, int32_t *x_high,
                                      int32_t *y_low, int32_t *y_high,
                                      bool *empty) {
  // deal with case that the point is out of feature map boundary
  if (y < -1.0 || y > input_height || x < -1.0 || x > input_width) {
    *empty = true;
    *w1 = *w2 = *w3 = *w4 = 0;
    *x_low = *x_high = *y_low = *y_high = -1;
    return;
  }
  *empty = false;
  if (y <= 0) y = (T)0;
  if (x <= 0) x = (T)0;

  *y_low = int32_t(y);
  *x_low = int32_t(x);

  if (*y_low >= input_height - 1) {
    *y_high = *y_low = input_height - 1;
    y = (T)(*y_low);
  } else {
    *y_high = *y_low + 1;
  }

  if (*x_low >= input_width - 1) {
    *x_high = *x_low = input_width - 1;
    x = T(*x_low);
  } else {
    *x_high = *x_low + 1;
  }
  T ly = y - *y_low;
  T lx = x - *x_low;
  T hy = 1.0 - ly;
  T hx = 1.0 - lx;
  *w1 = hy * hx;
  *w2 = hy * lx;
  *w3 = ly * hx;
  *w4 = ly * lx;
}

template <typename T>
__mlu_func__ void computeImpl(
    T *nram_grad_output, const T *grad_output, int32_t *nram_argmax_idx,
    const int32_t *argmax_idx, T *grad_input, T *nram_grad_input,
    const T *nram_boxes, const int32_t n, const int32_t c, const int32_t k,
    const int32_t border_idx, const int32_t K, const int32_t N, const int32_t C,
    const int32_t H, const int32_t W, const int32_t pool_size,
    const int32_t deal_num, const int32_t deal_num_align) {
  // argmax_idx, grad_output offset num
  const int32_t src_offset = n * K * C * 4 + k * C * 4 + border_idx * C + c;

  // bilinear_interpolate params
  int32_t x_low = 0, x_high = 0;
  int32_t y_low = 0, y_high = 0;
  bool empty = false;
  T w1 = 0, w2 = 0, w3 = 0, w4 = 0;

  const T x_start = *(nram_boxes + border_idx / 2 * 2);
  const T y_start = *(nram_boxes + 1 + border_idx / 2 * 2);
  const T box_width = *((T *)nram_boxes + 2) - *(T *)nram_boxes;
  const T box_height = *((T *)nram_boxes + 3) - *((T *)nram_boxes + 1);
  T x_stride = 0;
  T y_stride = 0;
  switch (border_idx) {
    case 0: {  // Top
      x_stride = box_width / pool_size;
      y_stride = 0;
    } break;
    case 1: {  // Left
      x_stride = 0;
      y_stride = box_height / pool_size;
    } break;
    case 2: {  // Bottom
      x_stride = -box_width / pool_size;
      y_stride = 0;
    } break;
    case 3: {  // Right
      x_stride = 0;
      y_stride = -box_height / pool_size;
    } break;
  }

  for (int32_t i = 0; i < pool_size + 1; ++i) {
    const T x = x_start + x_stride * i;
    const T y = y_start + y_stride * i;
    bilinearInterpolate(H, W, y, x, &w1, &w2, &w3, &w4, &x_low, &x_high, &y_low,
                        &y_high, &empty);
    if (!empty) {
      // load argmax, creat mask
      __memcpy(nram_argmax_idx, argmax_idx + src_offset, deal_num * sizeof(int32_t), GDRAM2NRAM);  // NOLINT
      __bang_write_value(nram_grad_output, deal_num_align, (T)i);
      if (sizeof(T) == sizeof(float)) {
        __nram__ int32_t table[COMPUTE_COUNT_ALIGN] = {0, (int32_t)0xffffffff};
        __bang_int322float((float *)nram_argmax_idx, (int32_t *)nram_argmax_idx, deal_num, 0);  // NOLINT
        __bang_eq((T *)nram_argmax_idx, (T *)nram_argmax_idx, nram_grad_output, deal_num_align);  // NOLINT
        __bang_float2int32((int32_t *)nram_argmax_idx, (float *)nram_argmax_idx, deal_num_align, 0);  // NOLINT
        __bang_lut_s32((int32_t *)nram_argmax_idx, (int32_t *)nram_argmax_idx, table, deal_num_align, COMPUTE_COUNT_ALIGN);  // NOLINT

      } else {
        __nram__ int16_t table[COMPUTE_COUNT_ALIGN] = {0, (int16_t)0xffff};
        __bang_int322half((half *)nram_argmax_idx, (int32_t *)nram_argmax_idx, deal_num, 0);  // NOLINT
        __bang_eq((T *)nram_argmax_idx, (T *)nram_argmax_idx, nram_grad_output, deal_num_align);  // NOLINT
        __bang_half2int16_rd((int16_t *)nram_argmax_idx, (half *)nram_argmax_idx, deal_num_align, 0);  // NOLINT
        __bang_lut_s16((int16_t *)nram_argmax_idx, (int16_t *)nram_argmax_idx, table, deal_num_align, COMPUTE_COUNT_ALIGN);  // NOLINT
      }

      // load grad_output, calculate grad_input
      __memcpy(nram_grad_output, grad_output + src_offset, deal_num * sizeof(T), GDRAM2NRAM);  // NOLINT
      computeGradInput(nram_grad_input, nram_grad_output, grad_input,
                       (T *)nram_argmax_idx, w1, w2, w3, w4, x_low, y_low,
                       x_high, y_high, C, c, W, n, H, border_idx, deal_num,
                       deal_num_align);
    }
  }
}

template <typename T>
__mlu_global__ void MLUKernelBorderAlignBackward(
    const T *grad_output, const T *boxes, const int32_t *argmax_idx,
    const int32_t pool_size, const int32_t N, const int32_t H, const int32_t W,
    const int32_t C, const int32_t K, T *grad_input) {
  if (coreId == 0x80) {
    return;
  }

  /*
   * NRAM partition
   *  |--------------------------------------|
   *  |    grad_output    |    grad_intput   |
   *  |--------------------------------------|
   *  |    argmax_idx     |    boxes         |
   *  |--------------------------------------|
   */
  const int32_t deal_num = PAD_DOWN(
      (MAX_NRAM_SIZE - NFU_ALIGN_SIZE) / (2 * sizeof(T) + 1 * sizeof(int32_t)),
      NFU_ALIGN_SIZE);
  T *nram_boxes = (T *)nram_buffer;
  T *nram_grad_output = (T *)((char *)nram_buffer + NFU_ALIGN_SIZE);
  T *nram_grad_input = (T *)nram_grad_output + deal_num;
  int32_t *nram_argmax_idx = (int32_t *)((T *)nram_grad_input + deal_num);

  // partition grad_output(shape = [N, K, 4, C])
  const int32_t total_num = N * K * 4;
  const int32_t num_per_core =
      total_num / taskDim + int32_t((total_num % taskDim) > taskId);

  for (int32_t i = 0; i < num_per_core; ++i) {
    const int32_t idx = taskId + i * taskDim;
    const int32_t n = idx / K / 4;
    const int32_t k = idx / 4 % K;
    const int32_t border_idx = idx % 4;

    __memcpy((void *)nram_boxes, (void *)((T *)boxes + idx / 4 * 4),
             4 * sizeof(T), GDRAM2NRAM);

    const int32_t c_repeat = C / deal_num;
    const int32_t c_rem = C % deal_num;
    for (int32_t c_seg_idx = 0; c_seg_idx < c_repeat; ++c_seg_idx) {
      computeImpl((T *)nram_grad_output, (T *)grad_output,
                  (int32_t *)nram_argmax_idx, (int32_t *)argmax_idx,
                  (T *)grad_input, (T *)nram_grad_input, nram_boxes, n,
                  c_seg_idx * deal_num, k, border_idx, K, N, C, H, W, pool_size,
                  deal_num, deal_num);
    }
    if (c_rem != 0) {
      const int32_t c_rem_align = PAD_UP(c_rem, NFU_ALIGN_SIZE);
      computeImpl((T *)nram_grad_output, (T *)grad_output,
                  (int32_t *)nram_argmax_idx, (int32_t *)argmax_idx,
                  (T *)grad_input, (T *)nram_grad_input, nram_boxes, n,
                  C - c_rem, k, border_idx, K, N, C, H, W, pool_size, c_rem,
                  c_rem_align);
    }
  }
}

void MLUOP_WIN_API KernelBorderAlignBackward(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpDataType_t data_type, const void *grad_output, const void *boxes,
    const int32_t *argmax_idx, const int32_t pool_size, int32_t N, int32_t H,
    int32_t W, int32_t C, int32_t K, void *grad_input) {
  // launch kernel
  if (data_type == mluOpDataType_t::MLUOP_DTYPE_FLOAT) {
    MLUKernelBorderAlignBackward<<<k_dim, k_type, queue>>>(
        (float *)grad_output, (float *)boxes, (int32_t *)argmax_idx, pool_size,
        N, H, W, C, K, (float *)grad_input);
  } else if (data_type == mluOpDataType_t::MLUOP_DTYPE_HALF) {
    MLUKernelBorderAlignBackward<<<k_dim, k_type, queue>>>(
        (half *)grad_output, (half *)boxes, (int32_t *)argmax_idx, pool_size, N,
        H, W, C, K, (half *)grad_input);
  }
}
