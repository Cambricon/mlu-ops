/*************************************************************************
 * Copyright (C) [2024] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#include "mlu.h"
#include "kernels/debug.h"
#include "kernels/kernel.h"
#include "kernels/utils/common.h"
#include "kernels/fft/fft.h"
#include "kernels/fft/fft_optm_device/fft_butterfly_ops.h"
#include "kernels/fft/fft_optm_device/fft_c2r_stockham_gdram.h"
#include "kernels/fft/fft_optm_device/fft_nram_wram_allocate.h"

__mlu_global__ void MLUKernelFFT1dButterflyRowC2R(
    void *input, void *output, int *factors, void *twiddles, void *twiddles_end,
    void *dft_matrix, void *buffer, int batch, int fft_flag, int dtype_size) {
  switch (dtype_size) {
    case (MLUOP_DTYPE_COMPLEX_FLOAT):
    case (MLUOP_DTYPE_FLOAT): {
      computeMutiStageOnchipC2R<float>((float *)input, (float *)output, factors,
                                       (float *)twiddles, (float *)twiddles_end,
                                       (float *)dft_matrix, (float *)buffer,
                                       batch, fft_flag);
    }; break;
    case (MLUOP_DTYPE_COMPLEX_HALF):
    case (MLUOP_DTYPE_HALF): {
      computeMutiStageOnchipC2R<half>((half *)input, (half *)output, factors,
                                      (half *)twiddles, (half *)twiddles_end,
                                      (half *)dft_matrix, (half *)buffer, batch,
                                      fft_flag);
    }; break;

    default: {
      MLULOG("mluOpFFT Not Implemented.");
    }
  }
}

mluOpStatus_t MLUOP_WIN_API kernelFFT1dButterflyRowC2R(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";

  KERNEL_CHECK((MLUKernelFFT1dButterflyRowC2R<<<k_dim, k_type, queue>>>(
      fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
      fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles,
      fft_plan->mlu_addrs.twiddles_end, fft_plan->mlu_addrs.dft_matrix,
      fft_plan->mlu_addrs.buffer_buf, fft_plan->batch, flag,
      fft_plan->output_dtype)));

  return MLUOP_STATUS_SUCCESS;
}

mluOpStatus_t MLUOP_WIN_API kernelIRFFT2dButterflyRow(cnrtDim3_t k_dim,
                                                      cnrtFunctionType_t k_type,
                                                      cnrtQueue_t queue,
                                                      mluOpFFTPlan_t fft_plan,
                                                      FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";

  KERNEL_CHECK((MLUKernelFFT1dButterflyRowC2R<<<k_dim, k_type, queue>>>(
      fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
      fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles,
      fft_plan->mlu_addrs.twiddles_end, fft_plan->mlu_addrs.dft_matrix,
      fft_plan->mlu_addrs.buffer_buf, fft_plan->n[0], flag,
      fft_plan->output_dtype)));

  return MLUOP_STATUS_SUCCESS;
}
