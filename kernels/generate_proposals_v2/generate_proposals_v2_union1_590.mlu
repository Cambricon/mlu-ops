/*************************************************************************
 * Copyright (C) [2024] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "generate_proposals_v2.h"

#include <float.h>

#include "core/logging.h"
#include "kernels/kernel.h"
#include "kernels/utils/common.h"
#include "kernels/generate_proposals_v2/generate_proposals_v2_nms_utils.h"

template <typename T>
__mlu_func__ void filterBoxes(T *proposals_score_nram, T *proposals_box_nram,
                              const T *im_shape, T *temp_nram_xywh,
                              T *temp_nram_mask, int32_t *after_count,
                              const int32_t deal_num, const T min_size,
                              const bool pixel_offset) {
  T *wh = temp_nram_xywh;
  T *cx = temp_nram_xywh + 2 * deal_num;
  T *cy = temp_nram_xywh + 3 * deal_num;

  T *mask_tmp1 = temp_nram_mask;
  T *mask_tmp2 = temp_nram_mask + deal_num;
  T *tmp1 = temp_nram_mask + 2 * deal_num;

  // w = box[2] - box[0], h = box[3] - box[1];
  T *xymin = proposals_box_nram;
  T *xymax = proposals_box_nram + 2 * deal_num;

  // xmax - xmin, ymax - ymin
  __bang_sub(wh, xymax, xymin, 2 * deal_num);
  if (pixel_offset) {
    T offset = 1.0;
    // w = w + offset, h = h + offset
    __bang_add_scalar(wh, wh, offset, deal_num * 2);
  }
  // cx = box[0] + 0.5 * w, cy = box[1] + 0.5 * h
  __bang_fusion(FUSION_FMA, cx, wh, (T)0.5, xymin, 2 * deal_num, 2 * deal_num);
  float real_min_size = min_size > 1.0 ? min_size : 1.0;
  // mask_tmp1 = w >= min_size ? 1 : 0;
  __bang_ge_scalar(mask_tmp1, wh, real_min_size, deal_num * 2);
  // mask_tmp2 = mask_tmp1 & mask_tmp2
  __bang_and(mask_tmp2, mask_tmp1, mask_tmp2, deal_num);

  if (pixel_offset) {
    T im_h = im_shape[0];
    T im_w = im_shape[1];
    // mask_tmp1 = cx <= im_w ? 1 : 0;  mask_tmp2 = cy <= im_h ? 1 : 0;
    __bang_write_value(tmp1, deal_num, im_w);
    __bang_le(mask_tmp1, cx, tmp1, deal_num);
    __bang_and(mask_tmp2, mask_tmp2, mask_tmp1, deal_num);
    __bang_write_value(tmp1, deal_num, im_h);
    __bang_le(mask_tmp1, cy, tmp1, deal_num);
    __bang_and(mask_tmp2, mask_tmp2, mask_tmp1, deal_num);
  }

  int count = __bang_count(mask_tmp2, deal_num);
  *after_count = count;
  if (count == deal_num) {
    return;
  }
  // collect and store box and scores
  __bang_filter(proposals_box_nram, proposals_box_nram, mask_tmp2, deal_num);
  __bang_filter(proposals_box_nram + 1 * deal_num,
                proposals_box_nram + 1 * deal_num, mask_tmp2, deal_num);
  __bang_filter(proposals_box_nram + 2 * deal_num,
                proposals_box_nram + 2 * deal_num, mask_tmp2, deal_num);
  __bang_filter(proposals_box_nram + 3 * deal_num,
                proposals_box_nram + 3 * deal_num, mask_tmp2, deal_num);
  __bang_filter(proposals_score_nram, proposals_score_nram, mask_tmp2,
                deal_num);
}

template <typename T>
__mlu_func__ void proposalBoxesDecode(
    const T *sorted_score, const int32_t *sorted_index, const T *bbox_deltals,
    const T *im_shape, const T *anchors, const T *variances, const T min_size,
    const bool pixel_offset, T *proposals_score, T *proposals_box,
    T *proposals_temp, const int64_t pre_nms_num, const int64_t hwa,
    int32_t *collect_num, int32_t *proposals_num) {
  if (pre_nms_num == 0) {
    return;
  }
  /*
  |-----------------------------------------|
  |    anchors_nram     |   4 * align_count |
  |  bbox_deltals_nram  |   4 * align_count |
  |   temp_nram         |   4 * align_count |
  |   xywh_nram         |   4 * align_count |
  |   variances_nram    |   4 * align_count |
  | sorted_index_nram   |   align_count     |
  | anchors_index_nram  |   align_count     |
  | proposals_score_nram|   align_count     |
  -------------------------------------------
  if variances is nullptr, the variance nram is not needed
  */
  const int nram_block = (variances == nullptr) ? 19 : 23;
  const int align_count =
      PAD_DOWN((MAX_NRAM_SIZE / sizeof(T) / nram_block), ALIGN_NUM);
  const int64_t num_per_core = pre_nms_num / taskDim;
  const int num_rem = pre_nms_num % taskDim;
  const int64_t num_offset = (taskId < num_rem)
                                 ? (num_per_core + 1) * taskId
                                 : num_per_core * taskId + num_rem;
  const int64_t num_cur_core =
      (taskId < num_rem) ? num_per_core + 1 : num_per_core;
  const int repeat = num_cur_core / align_count;
  const int rem = num_cur_core % align_count;

  T *anchors_nram = (T *)nram_buffer;
  // 4 * align_count: xywh
  T *bbox_deltals_nram = anchors_nram + 4 * align_count;
  T *variances_nram = (variances == nullptr)
                          ? bbox_deltals_nram
                          : bbox_deltals_nram + 4 * align_count;
  T *temp_nram = variances_nram + 4 * align_count;
  T *xywh_nram = temp_nram + 4 * align_count;
  T *sorted_index_nram = xywh_nram + 4 * align_count;
  T *anchors_index_nram = sorted_index_nram + align_count;
  T *proposals_score_nram = anchors_index_nram + align_count;
  T *proposals_score_temp = proposals_temp;
  T *proposals_box_temp = proposals_score_temp + hwa;

  int32_t core_store_offset = 0;
  for (int iter = 0; iter < repeat + 1; iter++) {
    if ((rem == 0) && (iter == repeat)) {
      break;
    }
    const int32_t deal_num = (iter == repeat) ? rem : align_count;
    const int64_t core_iter_offset = num_offset + align_count * iter;
    // gather anchors:x1,y1,x2,y2 by correspond sorted_index.
    __memcpy(sorted_index_nram, sorted_index + core_iter_offset,
             deal_num * sizeof(T), GDRAM2NRAM);
    // sorted_index->anchors_index ([HWA,1]->[HWA,4])
    __bang_mul_scalar(anchors_index_nram, sorted_index_nram, 4, deal_num);
    // gather offset (byte).
    __bang_mul_scalar(anchors_index_nram, anchors_index_nram, sizeof(int32_t),
                      deal_num);
    __gather(temp_nram, anchors, (unsigned int *)anchors_index_nram,
             sizeof(T) * 4, GDRAM2NRAM, sizeof(T) * 4, deal_num);
    __bang_transpose(anchors_nram, temp_nram, deal_num, 4);
    T *axymin = anchors_nram;  // axmin,aymin
    T *axymax = anchors_nram + 2 /*axmax,aymax*/ * deal_num;
    __gather(temp_nram, bbox_deltals, (unsigned int *)anchors_index_nram,
             sizeof(T) * 4, GDRAM2NRAM, sizeof(T) * 4, deal_num);
    // [deal_num, 4]->[4, deal_num]
    __bang_transpose(bbox_deltals_nram, temp_nram, deal_num, 4);
    T *dxymin = bbox_deltals_nram;  // dxmin,dymin
    T *dxmax = bbox_deltals_nram + 2 * deal_num;
    T *dymax = bbox_deltals_nram + 3 * deal_num;
    T offset = pixel_offset ? static_cast<T>(1.0) : 0;
    T *wh = xywh_nram;
    T *cxy = xywh_nram + 2 /*center_x,center_y*/ * deal_num;

    // w = axmax - axmin + offset , h = aymax - aymin + offset
    __bang_sub((T *)wh, (T *)axymax, (T *)axymin, 2 * deal_num);  // w,h
    if (pixel_offset) {
      // axmax - axmin + offset
      __bang_add_scalar(wh, wh, offset, deal_num * 2);
    }
    // cx = 0.5 * w + axmin;
    // cy = 0.5 * h + aymin;
    __bang_fusion(FUSION_FMA, cxy, wh, (T)0.5, axymin, 2 * deal_num,
                  2 * deal_num);
    T *d_w = temp_nram;
    T *d_h = temp_nram + deal_num;
    T *d_cx = temp_nram + 2 * deal_num;
    T *d_cy = temp_nram + 3 * deal_num;
    if (variances) {
      __gather(temp_nram, variances, (unsigned int *)anchors_index_nram,
               sizeof(T) * 4, GDRAM2NRAM, sizeof(T) * 4, deal_num);
      __bang_transpose(variances_nram, temp_nram, deal_num, 4);
      // d_cx = cx + dxmin * w * var[k];
      // d_cy = cy + dymin * h * var[k + 1];
      __bang_mul(d_cx, dxymin, wh, deal_num * 2);
      // dxmin * w * var[k];
      __bang_fusion(FUSION_FMA, d_cx, d_cx, variances_nram, cxy, deal_num * 2,
                    deal_num * 2);
      // dxmax * var[k + 2]
      __bang_mul(d_w, dxmax, variances_nram + 2 * deal_num, deal_num * 2);
    } else {
      __bang_fusion(FUSION_FMA, d_cx, dxymin, wh, cxy, deal_num * 2,
                    deal_num * 2);
    }
    // Min(dymax * var[k + 3], bbox_clip_default)
    // bbox_clip_default = std::log(1000.0 / 16.0);
    const float bbox_clip_default = 4.135166556742356f;
    T *tmp1 = axymin;
    T *tmp2 = tmp1 + deal_num;
    __bang_write_value(tmp1, deal_num, bbox_clip_default);
    __bang_minequal(dxmax, d_w, tmp1, deal_num);
    __bang_minequal(dymax, d_h, tmp1, deal_num);
    // d_w = exp(Min(dxmax * var[k + 2], bbox_clip_default)) * w;
    calcExp(d_w, dxmax, deal_num);
    calcExp(d_h, dymax, deal_num);

    __bang_mul(d_w, d_w, wh, deal_num * 2);
    T *oxymin = wh;   // T *oymin = h;
    T *oxymax = cxy;  // T *oymax = cy;
    // T oxmin = d_cx - d_w * 0.5;
    __bang_mul_scalar(tmp1, d_w, (T)0.5, deal_num * 2);
    __bang_sub(oxymin, d_cx, tmp1, deal_num * 2);
    // T oxmax = d_cx + d_w * 0.5 - offset;
    __bang_add(oxymax, d_cx, tmp1, deal_num * 2);
    if (pixel_offset) {
      __bang_sub_scalar(oxymax, oxymax, T(1.0), deal_num * 2);
    }
    __bang_write_value(tmp1, deal_num, (T)(im_shape[1] - offset));
    __bang_write_value(tmp2, deal_num, (T)(im_shape[0] - offset));
    __bang_minequal(d_w, oxymin, tmp1, deal_num * 2);
    __bang_minequal(d_cx, oxymax, tmp1, deal_num * 2);
    __bang_write_value(tmp1, deal_num, (T)(0));

    T *proposals_box_nram = bbox_deltals_nram;
    __bang_maxequal(proposals_box_nram, tmp1, d_w, deal_num);
    __bang_maxequal(proposals_box_nram + deal_num, tmp1, d_h, deal_num);
    __bang_maxequal(proposals_box_nram + 2 * deal_num, tmp1, d_cx, deal_num);
    __bang_maxequal(proposals_box_nram + 3 * deal_num, tmp1, d_cy, deal_num);

    __memcpy(proposals_score_nram, sorted_score + core_iter_offset,
             deal_num * sizeof(T), GDRAM2NRAM);
    // filter bbox
    int32_t count = 0;
    filterBoxes(proposals_score_nram, proposals_box_nram, im_shape, temp_nram,
                variances_nram, &count, deal_num, min_size, pixel_offset);

    // store output:box and score.
    if (count == 0) {
      return;
    }
    __memcpy(proposals_score_temp + num_offset + core_store_offset,
             proposals_score_nram, count * sizeof(T), NRAM2GDRAM);
    __memcpy(proposals_box_temp + num_offset + core_store_offset,
             proposals_box_nram, count * sizeof(T), NRAM2GDRAM);
    __memcpy(proposals_box_temp + num_offset + core_store_offset + hwa,
             proposals_box_nram + deal_num, count * sizeof(T), NRAM2GDRAM);
    __memcpy(proposals_box_temp + num_offset + core_store_offset + 2 * hwa,
             proposals_box_nram + 2 * deal_num, count * sizeof(T), NRAM2GDRAM);
    __memcpy(proposals_box_temp + num_offset + core_store_offset + 3 * hwa,
             proposals_box_nram + 3 * deal_num, count * sizeof(T), NRAM2GDRAM);
    core_store_offset += count;
  }

  collect_num[taskId] = core_store_offset;
  if (taskDim != 1) {
    __sync_all_ipu();
  }

  int current_offset = 0;
  int all_proposls_num = 0;
  for (int i = 0; i < taskDim; ++i) {
    if (i < taskId) {
      current_offset += collect_num[i];
    }
    all_proposls_num += collect_num[i];
  }

  *proposals_num = all_proposls_num;
  if (all_proposls_num == 0 || core_store_offset == 0) {
    return;
  }

  // step 2
  __memcpy(proposals_score + current_offset, proposals_score_temp + num_offset,
           core_store_offset * sizeof(T), GDRAM2GDRAM);

  __memcpy(proposals_box + current_offset, proposals_box_temp + num_offset,
           core_store_offset * sizeof(T), GDRAM2GDRAM);

  __memcpy(proposals_box + current_offset + hwa,
           proposals_box_temp + num_offset + hwa, core_store_offset * sizeof(T),
           GDRAM2GDRAM);

  __memcpy(proposals_box + current_offset + 2 * hwa,
           proposals_box_temp + num_offset + 2 * hwa,
           core_store_offset * sizeof(T), GDRAM2GDRAM);

  __memcpy(proposals_box + current_offset + 3 * hwa,
           proposals_box_temp + num_offset + 3 * hwa,
           core_store_offset * sizeof(T), GDRAM2GDRAM);
}

template <typename T>
__mlu_func__ void ProposalForOneImage(
    const T *scores, const int32_t *scores_index, const T *bbox_deltas,
    const T *im_shape, const T *anchors, const T *variances, T *workspace,
    T *rpn_rois, T *rpn_roi_probs, int *rpn_rois_num,
    int *one_image_proposals_num, const int pre_nms_top_n,
    const int post_nms_top_n, const float nms_thresh, const float min_size,
    const bool pixel_offset, const int hwa, const int topk) {
  T *proposals_box = workspace;
  T *proposals_score = workspace + 4 * hwa;
  T *proposals_temp = workspace + 5 * hwa;
  int *collect_num = (int *)workspace + 10 * hwa;
  int proposals_num = 0;
  collect_num[taskId] = 0;
  proposalBoxesDecode(scores, scores_index, bbox_deltas, im_shape, anchors,
                      variances, min_size, pixel_offset, proposals_score,
                      proposals_box, proposals_temp, topk, hwa, collect_num,
                      &proposals_num);
  rpn_rois_num[0] = 0;
  if (proposals_num == 0) {
    rpn_rois_num[0] = 1;
    one_image_proposals_num[0] += rpn_rois_num[0];
    return;
  }

  if (taskDim != 1) {
    __sync_all_ipu();
  }
  nonMaximumSuppress(rpn_rois, rpn_roi_probs, rpn_rois_num, proposals_score,
                     proposals_box, proposals_temp, nms_thresh, post_nms_top_n,
                     proposals_num, pixel_offset, hwa);

  one_image_proposals_num[0] += rpn_rois_num[0];
}

template <typename T>
__mlu_global__ void mluOpGenerateProposalsV2Kernel(
    const T *scores, const int32_t *scores_index, const T *bbox_deltas,
    const T *im_shape, const T *anchors, const T *variances, T *workspace,
    T *rpn_rois, T *rpn_roi_probs, int *rpn_rois_num, int *rpn_rois_batch_size,
    const int pre_nms_top_n, const int post_nms_top_n, const float nms_thresh,
    const float min_size, const float eta, const bool pixel_offset,
    const int batch_size, const int anchors_num, const int W, const int H) {
  if (__is_mpu()) return;
  const int hwa = anchors_num * H * W;
  const int topk =
      (pre_nms_top_n <= 0 || pre_nms_top_n > hwa) ? hwa : pre_nms_top_n;
  int all_proposals_num = 0;
  for (int batch_id = 0; batch_id < batch_size; ++batch_id) {
    if (taskDim != 1) {
      __sync_all_ipu();
    }
    int one_image_proposals_num = 0;
    const T *scores_slice = scores + batch_id * topk;
    const int32_t *scores_slice_index = scores_index + batch_id * topk;
    const T *bbox_deltas_slice = bbox_deltas + batch_id * 4 * hwa;
    const T *im_shape_slice = im_shape + batch_id * 2;
    const T *anchors_slice = anchors;
    const T *variances_slice = variances;

    T *rpn_rois_slice = rpn_rois + 4 * all_proposals_num;
    T *rpn_roi_probs_slice = rpn_roi_probs + all_proposals_num;
    int *rpn_rois_num_slice = rpn_rois_num + batch_id;
    ProposalForOneImage(scores_slice, scores_slice_index, bbox_deltas_slice,
                        im_shape_slice, anchors_slice, variances_slice,
                        workspace, rpn_rois_slice, rpn_roi_probs_slice,
                        rpn_rois_num_slice, &one_image_proposals_num,
                        pre_nms_top_n, post_nms_top_n, nms_thresh, min_size,
                        pixel_offset, hwa, topk);
    all_proposals_num += one_image_proposals_num;
  }
  *rpn_rois_batch_size = all_proposals_num;
}

mluOpStatus_t MLUOP_WIN_API KernelGenerateProposalsV2(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const float *scores, const int32_t *scores_index, const float *bbox_deltas,
    const float *im_shape, const float *anchors, const float *variances,
    float *workspace, float *rpn_rois, float *rpn_roi_probs, int *rpn_rois_num,
    int *rpn_rois_batch_size, const int pre_nms_top_n, const int post_nms_top_n,
    const float nms_thresh, const float min_size, const float eta,
    const bool pixel_offset, const int batch_size, const int anchors_num,
    const int H, const int W) {
  KERNEL_CHECK(mluOpGenerateProposalsV2Kernel<<<k_dim, k_type, queue>>>(
      scores, scores_index, bbox_deltas, im_shape, anchors, variances,
      workspace, rpn_rois, rpn_roi_probs, rpn_rois_num, rpn_rois_batch_size,
      pre_nms_top_n, post_nms_top_n, nms_thresh, min_size, eta, pixel_offset,
      batch_size, anchors_num, W, H));
  return MLUOP_STATUS_SUCCESS;
}
