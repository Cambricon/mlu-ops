/*************************************************************************
 * Copyright (C) 2021 by Cambricon, Inc. All rights reserved.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "bprint.h"

#include <string>

#include "core/context.h"
#include "core/logging.h"
#include "core/mlu_op_core.h"
#include "core/runtime/device.h"
#include "core/tensor.h"
#include "core/type.h"
#include "kernels/kernel.h"
#include "mlu_op.h"

void PolicyFuncBprint(const mluOpHandle_t &handle, cnrtDim3_t *k_dim,
                      cnrtFunctionType_t *k_type) {

    *k_type = CNRT_FUNC_TYPE_BLOCK;
    k_dim->x = 1;
    k_dim->y = 1;
    k_dim->z = 1;
}

mluOpStatus_t MLUOP_WIN_API mluOpBprint(mluOpHandle_t handle,
                                        const mluOpTensorDescriptor_t x_desc,
                                        const void *x) {

    PARAM_CHECK("[mluOpBprint]", handle != NULL);
    PARAM_CHECK("[mluOpBprint]", x_desc != NULL);

    if (mluOpGetTensorElementNum(x_desc) == 0) {
        VLOG(5) << "[mluOpBprint] Skip zero element tensor.";
        return MLUOP_STATUS_SUCCESS;
    }

    PARAM_CHECK("[mluOpBprint]", x != NULL);

    cnrtDim3_t k_dim;
    cnrtFunctionType_t k_type;
    PolicyFuncBprint(handle, &k_dim, &k_type);

    const int32_t element_num = mluOpGetTensorElementNum(x_desc);
    VLOG(5) << "[mluOpBprint] launch kernel policyFUnc[" << k_dim.x << ", "
            << k_dim.y << ", " << k_dim.z << "]";
    KERNEL_CHECK((MLUKernelBprint<<<k_dim, k_type, handle->queue>>>(
        (float *)x, element_num)));
    return MLUOP_STATUS_SUCCESS;
}

