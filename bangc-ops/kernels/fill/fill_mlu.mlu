/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "fill_mlu.h"

// FillDeviceValue
template <typename T>
__mlu_global__ void MLUUnion1KernelFillDeviceValue(void *output, size_t size,
                                                   const void *value);
__mlu_global__ void MLUUnion1KernelFillDeviceValueBool(void *output,
                                                       size_t size,
                                                       const void *value);
template <typename T>
__mlu_global__ void MLUUnion1KernelFillDeviceValueInt64(void *output,
                                                        size_t size,
                                                        const void *value);
void MLUOP_WIN_API mluOpUnion1KernelFillDeviceValue(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpDataType_t k_datatype, void *output, size_t size, const void *value) {
  switch (k_datatype) {
    case MLUOP_DTYPE_BOOL: {
      MLUUnion1KernelFillDeviceValueBool<<<k_dim, k_type, queue>>>(output, size,
                                                                   value);
    }; break;
    case MLUOP_DTYPE_INT8: {
      MLUUnion1KernelFillDeviceValue<int8_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_UINT8: {
      MLUUnion1KernelFillDeviceValue<uint8_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_INT16: {
      MLUUnion1KernelFillDeviceValue<int16_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_UINT16: {
      MLUUnion1KernelFillDeviceValue<uint16_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_HALF: {
      MLUUnion1KernelFillDeviceValue<half>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_FLOAT: {
      MLUUnion1KernelFillDeviceValue<float>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_INT32: {
      MLUUnion1KernelFillDeviceValue<int32_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_UINT32: {
      MLUUnion1KernelFillDeviceValue<uint32_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_INT64: {
      MLUUnion1KernelFillDeviceValueInt64<int64_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    case MLUOP_DTYPE_UINT64: {
      MLUUnion1KernelFillDeviceValueInt64<uint64_t>
          <<<k_dim, k_type, queue>>>(output, size, value);
    }; break;
    default: {
      LOG(ERROR) << "mluOpFill with " << k_datatype
                 << " data type is NOT implemented currently.";
    }; break;
  }
}

// FillHostValue
template <typename T>
__mlu_global__ void MLUUnion1KernelFillHostValue(void *output, size_t size,
                                                 uint32_t value);
__mlu_global__ void MLUUnion1KernelFillHostValueInt64(void *output, size_t size,
                                                      uint32_t value,
                                                      uint32_t value_high,
                                                      uint32_t value_low);
void MLUOP_WIN_API mluOpUnion1KernelFillHostValue(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpDataType_t k_datatype, void *output, size_t size, uint32_t value,
    uint32_t value_high, uint32_t value_low) {
  uint32_t fill_value = false;
  switch (k_datatype) {
    case MLUOP_DTYPE_BOOL:
      fill_value = (bool)((uint8_t)value);
      MLUUnion1KernelFillHostValue<uint8_t>
          <<<k_dim, k_type, queue>>>(output, size, fill_value);
    case MLUOP_DTYPE_INT8:
    case MLUOP_DTYPE_UINT8: {
      MLUUnion1KernelFillHostValue<uint8_t>
          <<<k_dim, k_type, queue>>>(output, size, (uint32_t)value);
    }; break;
    case MLUOP_DTYPE_HALF:
    case MLUOP_DTYPE_INT16:
    case MLUOP_DTYPE_UINT16: {
      MLUUnion1KernelFillHostValue<uint16_t>
          <<<k_dim, k_type, queue>>>(output, size, (uint32_t)value);
    }; break;
    case MLUOP_DTYPE_FLOAT:
    case MLUOP_DTYPE_INT32:
    case MLUOP_DTYPE_UINT32: {
      MLUUnion1KernelFillHostValue<uint32_t>
          <<<k_dim, k_type, queue>>>(output, size, (uint32_t)value);
    }; break;
    case MLUOP_DTYPE_INT64:
    case MLUOP_DTYPE_UINT64: {
      MLUUnion1KernelFillHostValueInt64<<<k_dim, k_type, queue>>>(
          output, size, (uint32_t)value, value_high, value_low);
    }; break;
    default: {
      LOG(ERROR) << "mluOpFill with " << k_datatype
                 << " data type is NOT implemented currently.";
    }; break;
  }
}

// FillDeviceValueWithStride
template <typename T>
__mlu_global__ void MLUUnion1KernelFillDeviceValueWithStride(
    void *output, TensorShape output_shape, size_t size, const void *value);

__mlu_global__ void MLUUnion1KernelFillDeviceValueWithStrideBool(
    void *output, TensorShape output_shape, size_t size, const void *value);

template <typename T>
__mlu_global__ void MLUUnion1KernelFillDeviceValueWithStrideInt64(
    void *output, TensorShape output_shape, size_t size, const void *value);

void MLUOP_WIN_API mluOpUnion1KernelFillDeviceValueWithStride(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpDataType_t k_datatype, void *output, TensorShape output_shape,
    size_t size, const void *value) {
  switch (k_datatype) {
    case MLUOP_DTYPE_BOOL: {
      MLUUnion1KernelFillDeviceValueWithStrideBool<<<k_dim, k_type, queue>>>(
          output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_INT8: {
      MLUUnion1KernelFillDeviceValueWithStride<int8_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_UINT8: {
      MLUUnion1KernelFillDeviceValueWithStride<uint8_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_INT16: {
      MLUUnion1KernelFillDeviceValueWithStride<int16_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_UINT16: {
      MLUUnion1KernelFillDeviceValueWithStride<uint16_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_HALF: {
      MLUUnion1KernelFillDeviceValueWithStride<half>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_FLOAT: {
      MLUUnion1KernelFillDeviceValueWithStride<float>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_INT32: {
      MLUUnion1KernelFillDeviceValueWithStride<int32_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_UINT32: {
      MLUUnion1KernelFillDeviceValueWithStride<uint32_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_INT64: {
      MLUUnion1KernelFillDeviceValueWithStrideInt64<int64_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_UINT64: {
      MLUUnion1KernelFillDeviceValueWithStrideInt64<uint64_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    default: {
      LOG(ERROR) << "mluOpFill with " << k_datatype
                 << " data type is NOT implemented currently.";
    }; break;
  }
}

// FillHostValueWithStride
template <typename T>
__mlu_global__ void MLUUnion1KernelFillHostValueWithStride(
    void *output, TensorShape output_shape, size_t size, uint32_t value);

__mlu_global__ void MLUUnion1KernelFillHostValueWithStrideUint64(
    void *output, TensorShape output_shape, size_t size, uint32_t value,
    uint32_t value_high, uint32_t value_low);

void MLUOP_WIN_API mluOpUnion1KernelFillHostValueWithStride(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpDataType_t k_datatype, void *output, TensorShape output_shape,
    size_t size, uint32_t value, uint32_t value_high, uint32_t value_low) {
  switch (k_datatype) {
    case MLUOP_DTYPE_BOOL:
      value = (bool)((uint8_t)value);
    case MLUOP_DTYPE_INT8:
    case MLUOP_DTYPE_UINT8: {
      MLUUnion1KernelFillHostValueWithStride<uint8_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_HALF:
    case MLUOP_DTYPE_INT16:
    case MLUOP_DTYPE_UINT16: {
      MLUUnion1KernelFillHostValueWithStride<uint16_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_FLOAT:
    case MLUOP_DTYPE_INT32:
    case MLUOP_DTYPE_UINT32: {
      MLUUnion1KernelFillHostValueWithStride<uint32_t>
          <<<k_dim, k_type, queue>>>(output, output_shape, size, value);
    }; break;
    case MLUOP_DTYPE_INT64:
    case MLUOP_DTYPE_UINT64: {
      MLUUnion1KernelFillHostValueWithStrideUint64<<<k_dim, k_type, queue>>>(
          output, output_shape, size, value, value_high, value_low);
    }; break;
    default: {
      LOG(ERROR) << "mluOpFill with " << k_datatype
                 << " data type is NOT implemented currently.";
    }; break;
  }
}
