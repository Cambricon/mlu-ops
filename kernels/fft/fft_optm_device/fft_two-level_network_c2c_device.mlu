/*************************************************************************
 * Copyright (C) [2024] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#include "mlu.h"
#include "kernels/debug.h"
#include "kernels/kernel.h"
#include "kernels/utils/common.h"
#include "kernels/fft/fft.h"
#include "kernels/fft/fft_optm_device/fft_butterfly_ops.h"
#include "kernels/fft/fft_optm_device/fft_c2c_stockham_gdram.h"
#include "kernels/fft/fft_optm_device/fft_nram_wram_allocate.h"

// Kernel function for 1D FFT butterfly operations on rows.
__mlu_global__ void MLUKernelFFT1dButterflyRow(
    void *input, void *output, int *factors, void *twiddles, void *twiddles_end,
    void *dft_matrix, void *buffer, const int batch, const int fft_flag,
    const int direction, const int dtype_size) {
  switch (dtype_size) {
    case (MLUOP_DTYPE_COMPLEX_FLOAT):
    case (MLUOP_DTYPE_FLOAT): {
      computeMutiStageOnchip<float>((float *)input, (float *)output, factors,
                                    (float *)twiddles, (float *)twiddles_end,
                                    (float *)dft_matrix, (float *)buffer, batch,
                                    fft_flag, direction);
    }; break;
    case (MLUOP_DTYPE_COMPLEX_HALF):
    case (MLUOP_DTYPE_HALF): {
      computeMutiStageOnchip<half>((half *)input, (half *)output, factors,
                                   (half *)twiddles, (half *)twiddles_end,
                                   (half *)dft_matrix, (half *)buffer, batch,
                                   fft_flag, direction);
    }; break;

    default: {
      MLULOG("mluOpFFT Not Implemented.");
    }
  }
}

// Kernel function for 1D FFT butterfly operations on columns.
__mlu_global__ void MLUKernelFFT1dButterflyColumn(
    void *input, void *output, int *factors, void *twiddles, void *twiddles_end,
    void *dft_matrix, void *buffer, const int batch, const int fft_flag,
    const int direction, const int dtype_size, const int nb) {
  switch (dtype_size) {
    case (MLUOP_DTYPE_COMPLEX_FLOAT):
    case (MLUOP_DTYPE_FLOAT): {
      computeMutiStageOnchipColumn<float>(
          (float *)input, (float *)output, factors, (float *)twiddles,
          (float *)twiddles_end, (float *)dft_matrix, (float *)buffer, batch,
          fft_flag, direction, nb);
    }; break;
    case (MLUOP_DTYPE_COMPLEX_HALF):
    case (MLUOP_DTYPE_HALF): {
      computeMutiStageOnchipColumn<half>((half *)input, (half *)output, factors,
                                         (half *)twiddles, (half *)twiddles_end,
                                         (half *)dft_matrix, (half *)buffer,
                                         batch, fft_flag, direction, nb);
    }; break;

    default: {
      MLULOG("mluOpFFT Not Implemented.");
    }
  }
}

// Launches a kernel for 2D FFT butterfly operations on columns.
mluOpStatus_t MLUOP_WIN_API kernelFFT2dButterflyColumn(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, const int direction, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";
  if (direction == FFT_FORWARD) {
    KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.output, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors_2d, fft_plan->mlu_addrs.twiddles_2d,
        fft_plan->mlu_addrs.twiddles_2d_end, fft_plan->mlu_addrs.dft_matrix_2d,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->n[1], flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype, fft_plan->n[1])));
  } else {
    KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors_2d, fft_plan->mlu_addrs.twiddles_inv_2d,
        fft_plan->mlu_addrs.twiddles_inv_2d_end,
        fft_plan->mlu_addrs.idft_matrix_2d, fft_plan->mlu_addrs.buffer_buf,
        fft_plan->n[1], flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype, fft_plan->n[1])));
  }
  return MLUOP_STATUS_SUCCESS;
}

// Launches a kernel for 1D FFT butterfly operations on columns.
mluOpStatus_t MLUOP_WIN_API kernelFFT1dButterflyColumn(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, const int direction, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";
  if (direction == FFT_FORWARD) {
    KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles,
        fft_plan->mlu_addrs.twiddles_end, fft_plan->mlu_addrs.dft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->batch, flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype, fft_plan->istride)));
  } else {
    KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles_inv,
        fft_plan->mlu_addrs.twiddles_inv_end, fft_plan->mlu_addrs.idft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->batch, flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype, fft_plan->istride)));
  }
  return MLUOP_STATUS_SUCCESS;
}

// Launches a kernel for 2D FFT butterfly operations on rows.
mluOpStatus_t MLUOP_WIN_API kernelFFT2dButterflyRow(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, const int direction, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";
  if (direction == FFT_FORWARD) {
    KERNEL_CHECK((MLUKernelFFT1dButterflyRow<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles,
        fft_plan->mlu_addrs.twiddles_end, fft_plan->mlu_addrs.dft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->n[0], flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype)));
  } else {
    KERNEL_CHECK((MLUKernelFFT1dButterflyRow<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.output, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles_inv,
        fft_plan->mlu_addrs.twiddles_inv_end, fft_plan->mlu_addrs.idft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->n[0], flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype)));
  }
  return MLUOP_STATUS_SUCCESS;
}

// Launches a kernel for 1D FFT butterfly operations on rows.
mluOpStatus_t MLUOP_WIN_API kernelFFT1dButterflyRow(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, const int direction, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";
  if (direction == FFT_FORWARD) {
    KERNEL_CHECK((MLUKernelFFT1dButterflyRow<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles,
        fft_plan->mlu_addrs.twiddles_end, fft_plan->mlu_addrs.dft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->batch, flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype)));
  } else {
    KERNEL_CHECK((MLUKernelFFT1dButterflyRow<<<k_dim, k_type, queue>>>(
        fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.output,
        fft_plan->mlu_addrs.factors, fft_plan->mlu_addrs.twiddles_inv,
        fft_plan->mlu_addrs.twiddles_inv_end, fft_plan->mlu_addrs.idft_matrix,
        fft_plan->mlu_addrs.buffer_buf, fft_plan->batch, flag,
        direction,  // direction, -1 means invalid(only FFT_IFFT use).
        fft_plan->output_dtype)));
  }

  return MLUOP_STATUS_SUCCESS;
}

// Launches a kernel for 2D real FFT butterfly operations on columns.
mluOpStatus_t MLUOP_WIN_API kernelRFFT2dButterflyColumn(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, FFTFlag flag) {
  VLOG(5) << "Launch kernelFFT1dButterflyColumn <<Union" << k_type / CORE_DIM
          << ", " << k_dim.x << ", " << k_dim.y << ", " << k_dim.z << ">>>";

  KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
      fft_plan->mlu_addrs.output, fft_plan->mlu_addrs.output,
      fft_plan->mlu_addrs.factors_2d, fft_plan->mlu_addrs.twiddles_2d,
      fft_plan->mlu_addrs.twiddles_2d_end, fft_plan->mlu_addrs.dft_matrix_2d,
      fft_plan->mlu_addrs.buffer_buf, fft_plan->n[1] / 2 + 1, flag,
      FFT_FORWARD,  // direction, -1 means invalid(only FFT_IFFT use).
      fft_plan->output_dtype, fft_plan->n[1] / 2 + 1)));

  return MLUOP_STATUS_SUCCESS;
}

// Launches a kernel for 2D IRFFT butterfly operations on columns.
mluOpStatus_t MLUOP_WIN_API kernelIRFFT2dButterflyColumn(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    mluOpFFTPlan_t fft_plan, FFTFlag flag) {
  VLOG(5) << "Launch Kernel kernelFFT1dButterflyRow <<Union"
          << k_type / CORE_DIM << ", " << k_dim.x << ", " << k_dim.y << ", "
          << k_dim.z << ">>>";

  KERNEL_CHECK((MLUKernelFFT1dButterflyColumn<<<k_dim, k_type, queue>>>(
      fft_plan->mlu_addrs.input, fft_plan->mlu_addrs.input,
      fft_plan->mlu_addrs.factors_2d, fft_plan->mlu_addrs.twiddles_inv_2d,
      fft_plan->mlu_addrs.twiddles_inv_2d_end,
      fft_plan->mlu_addrs.idft_matrix_2d, fft_plan->mlu_addrs.buffer_buf,
      fft_plan->n[1] / 2 + 1, flag,
      FFT_BACKWARD,  // direction, -1 means invalid(only FFT_IFFT use).
      fft_plan->output_dtype, fft_plan->n[1] / 2 + 1)));

  return MLUOP_STATUS_SUCCESS;
}
