# Copyright (C) [2022] by Cambricon, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall self.tcp included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS self.tcp LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# pylint: disable=invalid-name, missing-class-docstring, missing-function-docstring
# pylint: disable=attribute-defined-outside-init
#!/usr/bin/env python3
#coding:utf-8

import os
import subprocess
import sys
import argparse
import logging
import textwrap


def str2bool(v):
    # ref stackoverflow 15008758
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    if v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    raise argparse.ArgumentTypeError("Boolean value expected")


class MyFormatter(argparse.RawTextHelpFormatter,
                  argparse.ArgumentDefaultsHelpFormatter):
    pass


# 和README.md的内容一致
help_text_example = textwrap.dedent("""
Example:
    # (a) analyse one xml generated by gtest
    ./gtest_log_to_xlsx.py --log_path=output.xml

    # (b) analyse one xml generated by gtest without database
    ./gtest_log_to_xlsx.py --log_path=output.xml --use_db=0

    # (c) analyse one folder of xmls generated by gtest repeat mode
    ./gtest_log_to_xlsx.py --log_path=xml_folder_path

    # (d) compare two xml generated by gtest
    ./gtest_log_to_xlsx.py --log_path=output.xml --compare_path=baseline.xml

    # (e) compare two xml folder of xmls generated by gtest repeat mode
    ./gtest_log_to_xlsx.py --log_path=xml_folder_path --compare_path=baseline_folder_path

    see more details in README.md

""")


def check_mluop_proto():
    # generate mlu_op_test_pb2.py
    proto_dir = os.path.abspath(
        os.path.realpath(__file__) + "/../../../test/mlu_op_gtest/pb_gtest/mlu_op_test_proto")

    cwd = os.path.abspath(os.path.realpath(__file__) + "/../")
    cmd_args = [
        "protoc", "--python_out", cwd, "--proto_path", proto_dir,
        proto_dir + "/mlu_op_test.proto"
    ]
    try:
        # check returncode
        cmd_ret = subprocess.run(cmd_args, check=True)
    except Exception as e:
        print("run {} failed, please check!".format(" ".join(cmd_args)))
        sys.exit(1)


if __name__ == "__main__":
    # assure mlu_op_test_pb2.py exists
    check_mluop_proto()

    # argument parse
    parser = argparse.ArgumentParser(
        description="MLUOP Performance Analyse Tools",
        formatter_class=MyFormatter,
        epilog=help_text_example,
    )
    parser.add_argument("mode",
                        type=str,
                        nargs="?",
                        help="whether is administrator")

    parser.add_argument("--log_path",
                        type=str,
                        help="file or folder path of xml or log")
    parser.add_argument("--compare_path",
                        type=str,
                        help="baseline file or folder path of xml or log")
    parser.add_argument("--xlsx_path",
                        type=str,
                        help="path of the output excel file")

    parser.add_argument("--deduplication",
                        type=str2bool,
                        default=False,
                        help="whether remove duplicated case(input/output/params scale), defalut Flase")

    parser.add_argument("--is_release",
                        type=str2bool,
                        default=False,
                        help="whether is release or not(daily), default is daily")

    # == For administrator to get more output ==
    admin_group = parser.add_argument_group('admin',
                                            'optional for administrator')
    admin_group.add_argument("--case_run",
                             type=str2bool,
                             help="whether update mluop_case_run")
    admin_group.add_argument("--truncate_case_run",
                             type=str2bool,
                             help="whether truncate mluop_case_run")
    admin_group.add_argument("--cases_dir",
                             type=str,
                             help="cases directory for generating h5")
    admin_group.add_argument("--so_path",
                             type=str,
                             help="path of libmluOp.so to get code size")
    admin_group.add_argument("--so_path_compare",
                             type=str,
                             help="path of libmluOp.so to compare")
    admin_group.add_argument("--tpi",
                             type=str2bool,
                             help="whether generate tpi excel file")
    admin_group.add_argument("--simple_tpi",
                             type=str2bool,
                             help="whether generate simple_tpi excel file")
    admin_group.add_argument("--frameworks",
                             type=str,
                             default="pytorch",
                             help="filter of frameworks")

    # == For advanced or debug purpose ==
    advance_group = parser.add_argument_group(
        'advanced', 'optional for advanced and debug purpose')
    advance_group.add_argument('--logging_level',
                               choices=["DEBUG", "INFO", "WARNING", "ERROR"],
                               help="logging level",
                               default="WARNING",
                               type=str)
    advance_group.add_argument("--cpu_count",
                               type=int,
                               default=8,
                               help="the count of parsing prototxt cpu cores")
    advance_group.add_argument("--use_db",
                               type=str2bool,
                               default=True,
                               help="whether use database")
    # == END For advanced or debug purpose ==

    args = parser.parse_args()
    logging.getLogger().setLevel(args.logging_level)
    logging.basicConfig(
        format=
        '%(levelname)s:%(name)s [%(asctime)s.%(msecs)03d] [%(filename)s:%(lineno)d] %(message)s',
        datefmt='%H:%M:%S',
    )

    logging.info("mluOp perf_analyse start")

    import executor

    executor.Executor(args).run()

    logging.info("mluOp perf_analyse end")
