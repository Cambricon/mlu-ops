/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/tensor_stride_process/tensor_stride_process_common.h"

#include "mlu.h"

#define SIZE_NRAM_BUF (MAX_NRAM_SIZE + REM_FOR_STACK - 12 * 1024)
__nram__ int8_t ram[SIZE_NRAM_BUF];

template <typename T>
__mlu_func__ void blockTensorStridedIn(T *input,
                                       mluop::TensorShape &input_shape,
                                       T *output) {
  uint64_t total_num = input_shape.total_num;
  uint64_t data_per_core = total_num / taskDim;
  uint64_t data_last_core = total_num / taskDim + total_num % taskDim;
  // currently SIZE_NRAM_BUF does not exceed 2GB, keep int32 for performance
  // reasons
  int load_once = SIZE_NRAM_BUF / sizeof(T);
  uint64_t load_repeat;
  int load_remain;
  if (taskId < taskDim - 1) {
    load_once = load_once > data_per_core ? data_per_core : load_once;
    load_repeat = data_per_core / load_once;
    load_remain = data_per_core % load_once;
  } else {
    load_once = load_once > data_last_core ? data_last_core : load_once;
    load_repeat = data_last_core / load_once;
    load_remain = data_last_core % load_once;
  }
  for (uint64_t i = 0; i < load_repeat; i++) {
    tensorStrideLoad<T>((T *)ram, input, i * load_once + taskId * data_per_core,
                        load_once, sizeof(T), input_shape);
    __memcpy(output + i * load_once + taskId * data_per_core, (T *)ram,
             load_once * sizeof(T), NRAM2GDRAM);
  }
  if (load_remain > 0) {
    tensorStrideLoad<T>((T *)ram, input,
                        load_repeat * load_once + taskId * data_per_core,
                        load_remain, sizeof(T), input_shape);
    __memcpy(output + load_repeat * load_once + taskId * data_per_core,
             (T *)ram, load_remain * sizeof(T), NRAM2GDRAM);
  }
}

template <typename T>
__mlu_global__ void MLUUnionKernelTensorStrideIn(const void *input,
                                                 mluop::TensorShape input_shape,
                                                 void *output) {
  PERF_TIME_BEGIN();
  blockTensorStridedIn((T *)input, input_shape, (T *)output);
  PERF_TIME_END();
}

template __mlu_global__ void MLUUnionKernelTensorStrideIn<int8_t>(
    const void *input, mluop::TensorShape input_shape, void *output);
template __mlu_global__ void MLUUnionKernelTensorStrideIn<half>(
    const void *input, mluop::TensorShape input_shape, void *output);
template __mlu_global__ void MLUUnionKernelTensorStrideIn<float>(
    const void *input, mluop::TensorShape input_shape, void *output);
