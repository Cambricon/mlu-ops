/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "tensor_stride_process_mlu.h"
#include "tensor_stride_process.h"

template <typename T>
__mlu_global__ void MLUUnionKernelTensorStrideIn(const void *input,
                                                 TensorShape input_shape,
                                                 void *output);

template <typename T>
__mlu_global__ void MLUUnionKernelTensorStrideOut(const void *input,
                                                  void *output,
                                                  TensorShape output_shape);

void MLUOP_WIN_API mluOpUnion1KernelTensorStrideIn(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *input, TensorShape input_shape, void *output,
    mluOpDataType_t dtype) {
  switch (dtype) {
    case MLUOP_DTYPE_INT8:
    case MLUOP_DTYPE_BOOL:
    case MLUOP_DTYPE_UINT8: {
      MLUUnionKernelTensorStrideIn<int8>
          <<<k_dim, k_type, queue>>>(input, input_shape, output);
    } break;

    case MLUOP_DTYPE_INT16:
    case MLUOP_DTYPE_HALF: {
      MLUUnionKernelTensorStrideIn<half>
          <<<k_dim, k_type, queue>>>(input, input_shape, output);
    } break;

    case MLUOP_DTYPE_INT32:
    case MLUOP_DTYPE_FLOAT: {
      MLUUnionKernelTensorStrideIn<float>
          <<<k_dim, k_type, queue>>>(input, input_shape, output);
    } break;

    default:
      break;
  }
}

void MLUOP_WIN_API mluOpUnion1KernelTensorStrideOut(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *input, void *output, TensorShape output_shape,
    mluOpDataType_t dtype) {
  switch (dtype) {
    case MLUOP_DTYPE_INT8:
    case MLUOP_DTYPE_BOOL:
    case MLUOP_DTYPE_UINT8: {
      MLUUnionKernelTensorStrideOut<int8>
          <<<k_dim, k_type, queue>>>(input, output, output_shape);
    } break;

    case MLUOP_DTYPE_INT16:
    case MLUOP_DTYPE_HALF: {
      MLUUnionKernelTensorStrideOut<half>
          <<<k_dim, k_type, queue>>>(input, output, output_shape);
    } break;

    case MLUOP_DTYPE_INT32:
    case MLUOP_DTYPE_FLOAT: {
      MLUUnionKernelTensorStrideOut<float>
          <<<k_dim, k_type, queue>>>(input, output, output_shape);
    } break;

    default:
      break;
  }
}
