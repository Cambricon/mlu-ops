/*************************************************************************
 * Copyright (C) [2024] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "fill_llc_device.h"
#include "kernels/kernel.h"  // MAX_NRAM_SIZE

__mlu_global__ void flushLLC(void* input, int fill_bytes) {
#if (__BANG_ARCH__ >= 592)
  if (coreId != 0) {
    return;
  }
  int size_once = 256 * 1024;
  __nram__ int8_t buf[256 * 1024];
  int repeat = fill_bytes / size_once;
  for (int i = 0; i < repeat; i++) {
    __asm__ volatile(".volatile{ld.3d.async.nram.gdram.scmlock [%[dst]], [%[src]], \
                      %[size], 0, 0, 0, 0, 0, 0, 0, 0;}\n\t"
                      ::[dst] "r"(buf), [src] "r"((char*)input + i * size_once),
                      [size] "r"(size_once));
  }
  for (int i = 0; i < repeat; i++) {
    __asm__ volatile(".volatile{ld.3d.async.nram.gdram.scmunlock [%[dst]], [%[src]], \
                      %[size], 0, 0, 0, 0, 0, 0, 0, 0;}\n\t"
                      ::[dst] "r"(buf), [src] "r"((char*)input + i * size_once),
                      [size] "r"(size_once));
  }
  for (int i = 0; i < repeat; i++) {
    __asm__ volatile(".volatile{ld.3d.async.nram.gdram.scmnormal [%[dst]], [%[src]], \
                      %[size], 0, 0, 0, 0, 0, 0, 0, 0;}\n\t"
                      ::[dst] "r"(buf), [src] "r"((char*)input + i * size_once),
                      [size] "r"(size_once));
  }
#endif  // __BANG_ARCH__ == 592
}
