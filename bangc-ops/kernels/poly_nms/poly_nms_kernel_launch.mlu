/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#include "kernels/poly_nms/poly_nms.h"

#include <string>

#include "core/gen_case.h"
#include "kernels/kernel.h"
#include "kernels/poly_nms/enums.h"
#include "mlu_op.h"
#include "mlu_op_kernel.h"

void MLUOP_WIN_API mluOpBlockKernelPolyNmsCalcAreaFloat(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const float *boxes, const int box_num, const int real_width,
    float *dev_area) {
  mluCalcArea<<<k_dim, k_type, queue>>>((float *)boxes, box_num, real_width,
                                        dev_area);
}

void MLUOP_WIN_API mluOpBlockKernelPolyNmsGenMaskFloat(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const float *boxes, const int box_num, const int real_width,
    const float iou_threshold, float *dev_area, uint32_t *dev_mask,
    int *dev_sort_info) {
  mluGenNmsMask<<<k_dim, k_type, queue>>>((float *)boxes, box_num, real_width,
                                          iou_threshold, dev_area, dev_mask,
                                          dev_sort_info);
}

void MLUOP_WIN_API mluOpBlockKernelPolyNmsGenResultFloat(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const int box_num, uint32_t *dev_mask, int *dev_sort_info, int *output,
    int *output_size) {
  mluGenNmsResult<OutputOrder::LOW_BOX_ID_FIRST><<<k_dim, k_type, queue>>>(
      box_num, dev_mask, dev_sort_info, (int *)output, (int *)output_size);
}
