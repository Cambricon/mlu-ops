/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/kernel.h"
#include "mlu_op_kernel.h"

#define ALIGN_BYTE 1024
#define MIN(x, y) ((x) < (y)) ? (x) : (y)
#define EPSILON 1e-6
__nram__ char nram_buffer[MAX_NRAM_SIZE];

template <typename T>
__mlu_func__ void generate_AbAb_Mask(T *a_mask, T a_index, T *b_mask, T b_index,
                                     T *tmp, T *result, const int align_num) {
  __bang_write_zero(result, align_num);
  __bang_mul_scalar(tmp, a_mask, a_index, align_num);
  __bang_add(result, result, tmp, align_num);
  __bang_mul_scalar(tmp, b_mask, b_index, align_num);
  __bang_add(result, result, tmp, align_num);
}

template <typename T>
__mlu_global__ void mluKernelPriorVar(const int height, const int width,
                                      const int num_priors, T *variances,
                                      const int variances_num, T *var) {
  if (coreId == 0x80) {
    return;
  }
  constexpr int align_num = NFU_ALIGN_SIZE / sizeof(T);
  constexpr int max_nram_num = MAX_NRAM_SIZE / sizeof(T);
  const int one_var_size = CEIL_ALIGN(num_priors * 4, align_num);
  T *variances_nram = (T *)nram_buffer;
  T *var_nram = variances_nram + one_var_size;
  for (int i = 0; i < one_var_size / variances_num; i++) {
    for (int j = 0; j < variances_num; j++) {
      variances_nram[i * variances_num + j] = variances[j];
    }
  }

  const int residual_size = max_nram_num - CEIL_ALIGN(one_var_size, ALIGN_BYTE);
  const int one_loop_pixel_num = residual_size / one_var_size;
  // Distribute height for each task
  int height_seg = height % taskDim ? height / taskDim + 1 : height / taskDim;
  const int task_height_begin = MIN(taskId * height_seg, height);
  const int task_height_end = MIN(((taskId + 1) * height_seg), height);
  const int task_pixel_num = (task_height_end - task_height_begin) * width;
  int point_loop_num = task_pixel_num / one_loop_pixel_num;
  // Each task can handle num_priors boxes.
  if (task_pixel_num % one_loop_pixel_num) {
    point_loop_num += 1;
  }
  for (int i = 0; i < point_loop_num; i++) {
    const int pixel_begin_index =
        task_height_begin * width + i * one_loop_pixel_num;
    const int pixel_end_index =
        task_height_begin * width +
        (MIN(one_loop_pixel_num * (i + 1), task_pixel_num));
    const int loop_pixel_num = pixel_end_index - pixel_begin_index;
    T *loop_gdram_ptr = var + pixel_begin_index * num_priors * 4;
    __gdramset(loop_gdram_ptr, loop_pixel_num * num_priors * 4, (T)0);
    __bang_write_zero(var_nram, loop_pixel_num * one_var_size);
    __bang_cycle_add(var_nram, var_nram, variances_nram,
                     loop_pixel_num * one_var_size, one_var_size);
    // memcpy to gdram
    for (int j = 0; j < loop_pixel_num; j++) {
      __memcpy(loop_gdram_ptr + j * num_priors * 4, var_nram + j * one_var_size,
               num_priors * 4 * sizeof(T), NRAM2GDRAM);
    }
  }
}

template <typename T>
__mlu_global__ void mluKernelPriorBox(
    T *min_sizes, const int min_sizes_num, T *aspect_ratios,
    const int aspect_ratios_num, T *max_sizes, const int max_sizes_num,
    const int height, const int width, const int im_height, const int im_width,
    const T step_h, const T step_w, const T offset, const int num_priors,
    const bool clip, const bool min_max_aspect_ratios_order, T *output,
    const int output_size) {
  if (coreId == 0x80) {
    return;
  }
  /*
   * NRAM partition
   *  |------------------------------------------------------------------|
   *  |   box_wh   |  offset  |  step_wh  | recip_wh |
   *  |------------------------------------------------------------------|
   *  |     tmp    |  x_mask  |  y_mask   |  zeros   |
   *  |------------------------------------------------------------------|
   *  |   ones     |  boxes   |  -------one_pixel_num  boxes-------      |
   *  |------------------------------------------------------------------|
   */
  constexpr int align_num = NFU_ALIGN_SIZE / sizeof(T);
  constexpr int max_nram_num = MAX_NRAM_SIZE / sizeof(T) / 4;
  const int one_pixel_num = CEIL_ALIGN(num_priors, align_num);
  const int deal_size = one_pixel_num * 4;
  const int residual_num =
      max_nram_num - CEIL_ALIGN(one_pixel_num * 10, ALIGN_BYTE);
  const int one_loop_pixel_num = residual_num / one_pixel_num;
  // Divide height for each task
  int height_seg = height % taskDim ? height / taskDim + 1 : height / taskDim;
  const int task_height_begin = MIN(taskId * height_seg, height);
  const int task_height_end = MIN(((taskId + 1) * height_seg), height);
  const int task_pixel_num = (task_height_end - task_height_begin) * width;
  int point_loop_num = task_pixel_num / one_loop_pixel_num;
  // Each task can handle num_priors boxes.
  if (task_pixel_num % one_loop_pixel_num) {
    point_loop_num += 1;
  }

  T *box_wh = (T *)nram_buffer;
  T *offset_nram = box_wh + deal_size;
  T *step_wh = offset_nram + deal_size;
  T *recip_wh = step_wh + deal_size;
  T *tmp = recip_wh + deal_size;
  T *x_mask = tmp + deal_size;
  T *y_mask = x_mask + deal_size;
  T *zeros = y_mask + deal_size;
  T *ones = zeros + deal_size;
  T *boxes = ones + deal_size;

  __bang_write_value(offset_nram, deal_size, (T)offset);
  __bang_write_value(zeros, deal_size, (T)0);
  __bang_write_value(ones, deal_size, (T)1);
  // Initialize box_wh
  int count = 0;
  T box_width, box_height;
  for (int s = 0; s < min_sizes_num; ++s) {
    auto min_size = min_sizes[s];
    if (min_max_aspect_ratios_order) {
      box_wh[count * 4 + 0] = -min_size / 2;
      box_wh[count * 4 + 1] = -min_size / 2;
      box_wh[count * 4 + 2] = min_size / 2;
      box_wh[count * 4 + 3] = min_size / 2;
      count++;
      if (max_sizes_num > 0) {
        auto max_size = max_sizes[s];
        // square prior with size sqrt(minSize * maxSize)
        box_width = box_height = sqrt(min_size * max_size) / 2.;
        box_wh[count * 4 + 0] = -box_width;
        box_wh[count * 4 + 1] = -box_height;
        box_wh[count * 4 + 2] = box_width;
        box_wh[count * 4 + 3] = box_height;
        count++;
      }
      // priors with different aspect ratios
      for (int r = 0; r < aspect_ratios_num; ++r) {
        float ar = aspect_ratios[r];
        if (fabs(ar - 1.) < EPSILON) {
          continue;
        }
        box_width = min_size * sqrt(ar) / 2.;
        box_height = min_size / sqrt(ar) / 2.;
        box_wh[count * 4 + 0] = -box_width;
        box_wh[count * 4 + 1] = -box_height;
        box_wh[count * 4 + 2] = box_width;
        box_wh[count * 4 + 3] = box_height;
        count++;
      }
    } else {
      // priors with different aspect ratios
      for (int r = 0; r < aspect_ratios_num; ++r) {
        float ar = aspect_ratios[r];
        box_width = min_size * sqrt(ar) / 2.;
        box_height = min_size / sqrt(ar) / 2.;
        box_wh[count * 4 + 0] = -box_width;
        box_wh[count * 4 + 1] = -box_height;
        box_wh[count * 4 + 2] = box_width;
        box_wh[count * 4 + 3] = box_height;
        count++;
      }
      if (max_sizes_num > 0) {
        auto max_size = max_sizes[s];
        // square prior with size sqrt(minSize * maxSize)
        box_width = box_height = sqrt(min_size * max_size) / 2.;
        box_wh[count * 4 + 0] = -box_width;
        box_wh[count * 4 + 1] = -box_height;
        box_wh[count * 4 + 2] = box_width;
        box_wh[count * 4 + 3] = box_height;
        count++;
      }
    }
  }

  // Initialize x_mask
  for (int i = 0; i < one_pixel_num; i++) {
    x_mask[i * 4 + 0] = 1;
    x_mask[i * 4 + 1] = 0;
    x_mask[i * 4 + 2] = 1;
    x_mask[i * 4 + 3] = 0;

    y_mask[i * 4 + 0] = 0;
    y_mask[i * 4 + 1] = 1;
    y_mask[i * 4 + 2] = 0;
    y_mask[i * 4 + 3] = 1;
  }
  if (sizeof(T) == 4) {
    // Initialize step_wh
    generate_AbAb_Mask((float *)x_mask, (float)step_w, (float *)y_mask,
                       (float)step_h, (float *)tmp, (float *)step_wh,
                       deal_size);
    // Initialize recip_wh
    generate_AbAb_Mask((float *)x_mask, (float)(1.0 / (float)im_width),
                       (float *)y_mask, (float)(1.0 / (float)im_height),
                       (float *)tmp, (float *)recip_wh, deal_size);
  }
  for (int i = 0; i < point_loop_num; i++) {
    const int pixel_begin_index =
        task_height_begin * width + i * one_loop_pixel_num;
    const int pixel_end_index =
        task_height_begin * width +
        (MIN(one_loop_pixel_num * (i + 1), task_pixel_num));
    const int loop_pixel_num = pixel_end_index - pixel_begin_index;
    int pixel_index = pixel_begin_index;
    T *loop_gdram_ptr = output + pixel_begin_index * num_priors * 4;
    // prepare data
    int h_index = 0;
    int w_index = 0;
    while (pixel_index < pixel_end_index) {
      h_index = pixel_index / width;
      w_index = pixel_index % width;
      T *current_boxes_ptr =
          boxes + (pixel_index - pixel_begin_index) * deal_size;
      generate_AbAb_Mask(x_mask, (T)w_index, y_mask, (T)h_index, tmp,
                         current_boxes_ptr, deal_size);
      pixel_index++;
    }
    // calculate boxes location
    __gdramset(loop_gdram_ptr, loop_pixel_num * num_priors * 4, (T)0);
    __bang_cycle_add(boxes, boxes, offset_nram, loop_pixel_num * deal_size,
                     deal_size);
    __bang_cycle_mul(boxes, boxes, step_wh, loop_pixel_num * deal_size,
                     deal_size);
    __bang_cycle_add(boxes, boxes, box_wh, loop_pixel_num * deal_size,
                     deal_size);
    __bang_cycle_mul(boxes, boxes, recip_wh, loop_pixel_num * deal_size,
                     deal_size);
    // clip boxes location
    if (clip) {
      T *clip_boxes = boxes;
      for (int cycle_index = 0; cycle_index < loop_pixel_num; cycle_index++) {
        clip_boxes = boxes + cycle_index * deal_size;
        __bang_maxequal(clip_boxes, clip_boxes, zeros, deal_size);
        __bang_minequal(clip_boxes, clip_boxes, ones, deal_size);
      }
    }

    // memcpy to gdram
    for (int j = 0; j < loop_pixel_num; j++) {
      __memcpy(loop_gdram_ptr + j * num_priors * 4, boxes + j * deal_size,
               num_priors * 4 * sizeof(T), NRAM2GDRAM);
    }
  }
}

void MLUOP_WIN_API mluOpBlockKernelPriorBoxFloat(
    cnrtDim3_t k_dim_box, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *min_sizes, const int min_sizes_num, const void *aspect_ratios,
    const int aspect_ratios_num, const void *variances, const int variances_num,
    const void *max_sizes, const int max_sizes_num, const int height,
    const int width, const int im_height, const int im_width,
    const float step_h, const float step_w, const float offset,
    const int num_priors, const bool clip,
    const bool min_max_aspect_ratios_order, void *output, const int output_size,
    void *var, const int var_size) {
  mluKernelPriorBox<<<k_dim_box, k_type, queue>>>(
      (float *)min_sizes, min_sizes_num, (float *)aspect_ratios,
      aspect_ratios_num, (float *)max_sizes, max_sizes_num, height, width,
      im_height, im_width, (float)step_h, (float)step_w, (float)offset,
      num_priors, clip, min_max_aspect_ratios_order, (float *)output,
      output_size);
  mluKernelPriorVar<<<k_dim_box, k_type, queue>>>(height, width, num_priors,
                                                  (float *)variances,
                                                  variances_num, (float *)var);
}
