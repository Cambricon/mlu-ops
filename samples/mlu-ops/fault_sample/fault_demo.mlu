/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#include <iostream>
#include <memory>
#include <random>

#include "mlu_op.h"
#include "cnrt.h"
#include "fault_kernel.h"

#define TENSOR_NUM 2
#define DIM_SIZE 4

// gen fp32 random data
void random(float *ptr, size_t count) {
  std::random_device rd;
  std::mt19937 mt(rd());
  std::uniform_real_distribution<float> dis(-100, 100);
  for (size_t i = 0; i < count; ++i) {
    ptr[i] = dis(mt);
  }
}

void initDevice(int &dev, cnrtQueue_t &queue, mluOpHandle_t &handle) {
  CNRT_CHECK(cnrtGetDevice(&dev));
  CNRT_CHECK(cnrtSetDevice(dev));

  CNRT_CHECK(cnrtQueueCreate(&queue));

  mluOpCreate(&handle);
  mluOpSetQueue(handle, queue);
}

// host function: prepare resources and call device kernel
int main(int argc, char *argv[]) {
  printf("init device resources\n");
  int dev;
  mluOpHandle_t handle = nullptr;
  cnrtQueue_t queue = nullptr;

  initDevice(dev, queue, handle);
  printf("init device\n");

  int shape[DIM_SIZE] = {11, 13, 17, 19};  // a shape of tensor
  size_t element_num = 11 * 13 * 17 * 19;
  size_t data_size = element_num * sizeof(float);

  printf("prepare mluOpTensorDescriptor_t and malloc memory\n");
  // tensor[0]:input tensor, tensor[1]:output_tensor
  mluOpTensorDescriptor_t tensors[TENSOR_NUM];
  void *host_ptrs[TENSOR_NUM];
  void *device_ptrs[TENSOR_NUM];
  for (size_t i = 0; i < TENSOR_NUM; ++i) {
    // create input tensor descriptor
    mluOpTensorDescriptor_t desc = nullptr;
    mluOpCreateTensorDescriptor(&desc);
    mluOpSetTensorDescriptor(desc, MLUOP_LAYOUT_ARRAY, MLUOP_DTYPE_FLOAT, 4,
                             shape);
    tensors[i] = desc;
    // malloc host memory
    host_ptrs[i] = (void *)malloc(data_size);
    // malloc device memory
    void *input_ptr = nullptr;
    CNRT_CHECK(cnrtMalloc(&input_ptr, data_size));
    device_ptrs[i] = input_ptr;
  }

  // generator random input data
  random((float *)host_ptrs[0], element_num);

  printf("memcpy input data from host to device\n");
  CNRT_CHECK(cnrtMemcpy(device_ptrs[0], host_ptrs[0], data_size,
                        CNRT_MEM_TRANS_DIR_HOST2DEV));

  printf("call device kernel\n");
  // set function type and task dim
  cnrtDim3_t k_dim = {4, 1, 1};
  cnrtFunctionType_t k_type = CNRT_FUNC_TYPE_UNION1;
  // call device kernel function.
  MLUUnfinishedExampleKernel<<<k_dim, k_type, queue>>>(
      device_ptrs[0], device_ptrs[1], element_num);

  // sync: wait device finish compute
  CNRT_CHECK(cnrtQueueSync(queue));  // here should mlu unfinished.

  printf("copy result from device to host\n");
  CNRT_CHECK(cnrtMemcpy(host_ptrs[1], device_ptrs[1], data_size,
                        CNRT_MEM_TRANS_DIR_DEV2HOST));

  printf("free resources\n");
  for (size_t i = 0; i < TENSOR_NUM; ++i) {
    mluOpDestroyTensorDescriptor(tensors[i]);
    free(host_ptrs[i]);
    CNRT_CHECK(cnrtFree(device_ptrs[i]));
  }
  // free device resources
  CNRT_CHECK(cnrtQueueDestroy(queue));
  mluOpDestroy(handle);
  // cnrtDestroy();
  printf("example run success\n");
  return 0;
}
