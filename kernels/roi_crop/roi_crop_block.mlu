/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "roi_crop.h"

#include "core/logging.h"
#include "kernels/kernel.h"

__nram__ char nram_buffer[MAX_NRAM_SIZE];

template <typename T>
__mlu_func__ void swap(T &a, T &b) {
  T tmp = a;
  a = b;
  b = tmp;
}

template <typename T>
__mlu_func__ void getTopLeft(const T grid_yx_value, const int input_hw,
                             T *weight, int *point) {
  T xcoord = (grid_yx_value + 1) * (input_hw - 1) / 2;
  *point = floor(xcoord);
  *weight = 1 - (xcoord - (T)(*point));
}

__mlu_func__ bool between(const int value, const int lowerBound,
                          const int upperBound) {
  return (value >= lowerBound && value <= upperBound);
}

template <typename T>
__mlu_global__ void MLUKernelRoiCropForward(const T *input, const int batch,
                                            const int height, const int width,
                                            const int channel, const T *grid,
                                            const int grid_n, T *output,
                                            const int output_h,
                                            const int output_w) {
  if (__is_mpu()) {
    return;
  }
  int align_base_128 = NFU_ALIGN_SIZE / sizeof(T);
  int channel_align = CEIL_ALIGN(channel, align_base_128);

  int c_limit = FLOOR_ALIGN(MAX_NRAM_SIZE / sizeof(T) / 8, align_base_128);
  c_limit = c_limit > channel_align ? channel_align : c_limit;

  T *nram_ping = (T *)nram_buffer;
  T *nram_pong = nram_ping + c_limit * 4;

  int bin_first = taskId;
  int bin_end = grid_n * output_h * output_w;
  bool is_first_bin = true;

  for (int bin_i = bin_first; bin_i < bin_end; bin_i += taskDim) {
    int i_tl_x, i_tl_y;
    T i_tl_x_weight, i_tl_y_weight;
    T i_tl_x_weight_next, i_tl_y_weight_next;
    int i_tl_offset, i_tr_offset, i_bl_offset, i_br_offset;
    int c_rem = channel;
    int c_slice = c_limit < c_rem ? c_limit : c_rem;
    int c_offset = 0;
    // bin info
    int gw = bin_i % output_w;
    int gh = bin_i / output_w % output_h;
    int gn = bin_i / output_w / output_h;
    // batch index under input
    int i_batch_idx = gn / (grid_n / batch);
    // value of grid data
    T gy = grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2];
    T gx = grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2 + 1];
    int o_offset = gn * output_h * output_w * channel +
                   gh * output_w * channel + gw * channel;
    int i_offset = i_batch_idx * height * width * channel;
    // coordinates and weights under input data
    getTopLeft(gx, width, &i_tl_x_weight, &i_tl_x);
    getTopLeft(gy, height, &i_tl_y_weight, &i_tl_y);

    bool topLeftIsIn =
        between(i_tl_x, 0, width - 1) && between(i_tl_y, 0, height - 1);
    bool topRightIsIn =
        between(i_tl_x + 1, 0, width - 1) && between(i_tl_y, 0, height - 1);
    bool bottomLeftIsIn =
        between(i_tl_x, 0, width - 1) && between(i_tl_y + 1, 0, height - 1);
    bool bottomRightIsIn =
        between(i_tl_x + 1, 0, width - 1) && between(i_tl_y + 1, 0, height - 1);

    if (is_first_bin) {
      // load the first input to nram
      is_first_bin = false;
      i_tl_offset = i_offset + i_tl_y * width * channel + i_tl_x * channel;
      i_tr_offset = i_tl_offset + channel;
      i_bl_offset = i_tl_offset + width * channel;
      i_br_offset = i_tl_offset + width * channel + channel;
      __bang_write_value(nram_ping, 4 * c_limit, 0);
      __sync();
      if (topLeftIsIn) {
        __memcpy_async(nram_ping, input + i_tl_offset, c_slice * sizeof(T),
                       GDRAM2NRAM);
      }
      if (topRightIsIn) {
        __memcpy_async(nram_ping + c_limit, input + i_tr_offset,
                       c_slice * sizeof(T), GDRAM2NRAM);
      }
      if (bottomLeftIsIn) {
        __memcpy_async(nram_ping + 2 * c_limit, input + i_bl_offset,
                       c_slice * sizeof(T), GDRAM2NRAM);
      }
      if (bottomRightIsIn) {
        __memcpy_async(nram_ping + 3 * c_limit, input + i_br_offset,
                       c_slice * sizeof(T), GDRAM2NRAM);
      }
    }
    __bang_write_value(nram_pong, 4 * c_limit, 0);
    __sync();
    while (c_rem > 0) {
      c_slice = c_slice < c_rem ? c_slice : c_rem;
      // load the next input to nram
      if (c_rem - c_slice > 0) {
        // load the rest channel to nram
        int pongc_slice =
            (c_rem - c_slice > c_slice) ? c_slice : c_rem - c_slice;
        if (topLeftIsIn) {
          __memcpy_async(nram_pong, input + i_tl_offset + c_offset + c_slice,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (topRightIsIn) {
          __memcpy_async(nram_pong + c_limit,
                         input + i_tr_offset + c_offset + c_slice,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (bottomLeftIsIn) {
          __memcpy_async(nram_pong + 2 * c_limit,
                         input + i_bl_offset + c_offset + c_slice,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (bottomRightIsIn) {
          __memcpy_async(nram_pong + 3 * c_limit,
                         input + i_br_offset + c_offset + c_slice,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
      } else if (bin_i + taskDim < bin_end) {
        gw = (bin_i + taskDim) % output_w;
        gh = (bin_i + taskDim) / output_w % output_h;
        gn = (bin_i + taskDim) / output_w / output_h;
        // batch index under input
        i_batch_idx = gn / (grid_n / batch);
        // value of grid data
        gy = grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2];
        gx =
            grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2 + 1];
        i_offset = i_batch_idx * height * width * channel;
        // coordinates and weights under input data
        getTopLeft(gx, width, &i_tl_x_weight_next, &i_tl_x);
        getTopLeft(gy, height, &i_tl_y_weight_next, &i_tl_y);
        bool topLeftIsIn =
            between(i_tl_x, 0, width - 1) && between(i_tl_y, 0, height - 1);
        bool topRightIsIn =
            between(i_tl_x + 1, 0, width - 1) && between(i_tl_y, 0, height - 1);
        bool bottomLeftIsIn =
            between(i_tl_x, 0, width - 1) && between(i_tl_y + 1, 0, height - 1);
        bool bottomRightIsIn = between(i_tl_x + 1, 0, width - 1) &&
                               between(i_tl_y + 1, 0, height - 1);
        int pongc_slice = c_limit < channel ? c_limit : channel;

        i_tl_offset = i_offset + i_tl_y * width * channel + i_tl_x * channel;
        i_tr_offset = i_tl_offset + channel;
        i_bl_offset = i_tl_offset + width * channel;
        i_br_offset = i_tl_offset + width * channel + channel;

        if (topLeftIsIn) {
          __memcpy_async(nram_pong, input + i_tl_offset,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (topRightIsIn) {
          __memcpy_async(nram_pong + c_limit, input + i_tr_offset,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (bottomLeftIsIn) {
          __memcpy_async(nram_pong + 2 * c_limit, input + i_bl_offset,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
        if (bottomRightIsIn) {
          __memcpy_async(nram_pong + 3 * c_limit, input + i_br_offset,
                         pongc_slice * sizeof(T), GDRAM2NRAM);
        }
      }
      if (!topLeftIsIn && !topRightIsIn && !bottomLeftIsIn &&
          !bottomRightIsIn) {
        // store
        __memcpy(output + o_offset + c_offset, nram_ping, c_slice * sizeof(T),
                 NRAM2GDRAM);
        c_rem -= c_slice;
        c_offset += c_slice;
        swap(nram_ping, nram_pong);
        __bang_write_value(nram_pong, 4 * c_limit, 0);
        __sync();
        break;
      }
      // compute
      __bang_mul_scalar(nram_ping, nram_ping, i_tl_x_weight * i_tl_y_weight,
                        c_limit);
      __bang_mul_scalar(nram_ping + c_limit, nram_ping + c_limit,
                        (1 - i_tl_x_weight) * i_tl_y_weight, c_limit);
      __bang_mul_scalar(nram_ping + 2 * c_limit, nram_ping + 2 * c_limit,
                        i_tl_x_weight * (1 - i_tl_y_weight), c_limit);
      __bang_mul_scalar(nram_ping + 3 * c_limit, nram_ping + 3 * c_limit,
                        (1 - i_tl_x_weight) * (1 - i_tl_y_weight), c_limit);
      __bang_add(nram_ping, nram_ping, nram_ping + c_limit, c_limit);
      __bang_add(nram_ping + 2 * c_limit, nram_ping + 2 * c_limit,
                 nram_ping + 3 * c_limit, c_limit);
      __bang_add(nram_ping, nram_ping, nram_ping + 2 * c_limit, c_limit);

      // store
      __memcpy(output + o_offset + c_offset, nram_ping, c_slice * sizeof(T),
               NRAM2GDRAM);
      c_rem -= c_slice;
      c_offset += c_slice;
      swap(nram_ping, nram_pong);
      __bang_write_value(nram_pong, 4 * c_limit, 0);
      __sync();
    }
  }
}

template <typename T>
__mlu_global__ void MLUKernelRoiCropBackward(
    const T *grad_output, const int output_h, const int output_w, const T *grid,
    const int grid_n, T *grad_input, const int batch, const int height,
    const int width, const int channel) {
  if (__is_mpu()) {
    return;
  }
  int align_base_128 = NFU_ALIGN_SIZE / sizeof(T);
  int channel_align = CEIL_ALIGN(channel, align_base_128);
  int c_limit = FLOOR_ALIGN(MAX_NRAM_SIZE / sizeof(T) / 10, align_base_128);
  c_limit = c_limit > channel_align ? channel_align : c_limit;

  T *nram_ping = (T *)nram_buffer;
  T *nram_pong = nram_ping + c_limit * 5;
  T *nram_output = nullptr;

  int bin_first = taskId;
  int bin_end = grid_n * output_h * output_w;
  bool is_first_bin = true;

  for (int bin_i = bin_first; bin_i < bin_end; bin_i += taskDim) {
    int i_tl_x, i_tl_y;
    T i_tl_x_weight, i_tl_y_weight;
    int c_rem = channel;
    int c_slice = c_limit < c_rem ? c_limit : c_rem;
    int c_offset = 0;
    // bin info
    int gw = bin_i % output_w;
    int gh = bin_i / output_w % output_h;
    int gn = bin_i / output_w / output_h;
    // batch index under input
    int i_batch_idx = gn / (grid_n / batch);
    // value of grid data
    T gy = grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2];
    T gx = grid[gn * output_h * output_w * 2 + gh * output_w * 2 + gw * 2 + 1];
    // coordinates and weights under grad_input data
    getTopLeft(gx, width, &i_tl_x_weight, &i_tl_x);
    getTopLeft(gy, height, &i_tl_y_weight, &i_tl_y);

    int go_offset = gn * output_h * output_w * channel +
                    gh * output_w * channel + gw * channel;
    int gi_offset = i_batch_idx * height * width * channel;
    int gi_tl_offset = gi_offset + i_tl_y * width * channel + i_tl_x * channel;
    int gi_tr_offset = gi_tl_offset + channel;
    int gi_bl_offset = gi_tl_offset + width * channel;
    int gi_br_offset = gi_tl_offset + width * channel + channel;

    bool topLeftIsIn =
        between(i_tl_x, 0, width - 1) && between(i_tl_y, 0, height - 1);
    bool topRightIsIn =
        between(i_tl_x + 1, 0, width - 1) && between(i_tl_y, 0, height - 1);
    bool bottomLeftIsIn =
        between(i_tl_x, 0, width - 1) && between(i_tl_y + 1, 0, height - 1);
    bool bottomRightIsIn =
        between(i_tl_x + 1, 0, width - 1) && between(i_tl_y + 1, 0, height - 1);

    // load the first input to nram
    if (is_first_bin) {
      is_first_bin = false;
      __memcpy(nram_ping, grad_output + go_offset, c_slice * sizeof(T),
               GDRAM2NRAM);
    }
    nram_output = nram_ping + c_limit;
    while (c_rem > 0) {
      c_slice = c_slice < c_rem ? c_slice : c_rem;
      // load the next input to nram
      if (c_rem - c_slice > 0) {
        // load the rest channel to nram
        int pongc_slice =
            (c_rem - c_slice > c_slice) ? c_slice : c_rem - c_slice;
        __memcpy_async(nram_pong, grad_output + go_offset + c_offset + c_slice,
                       pongc_slice * sizeof(T), GDRAM2NRAM);
      } else if (bin_i + taskDim < bin_end) {
        // load next bin
        gw = (bin_i + taskDim) % output_w;
        gh = (bin_i + taskDim) / output_w % output_h;
        gn = (bin_i + taskDim) / output_w / output_h;
        go_offset = gn * output_h * output_w * channel +
                    gh * output_w * channel + gw * channel;

        int pongc_slice = c_limit < channel ? c_limit : channel;
        __memcpy_async(nram_pong, grad_output + go_offset,
                       pongc_slice * sizeof(T), GDRAM2NRAM);
      }
      // compute
      if (topLeftIsIn) {
        __bang_mul_scalar(nram_output, nram_ping, i_tl_x_weight * i_tl_y_weight,
                          c_limit);
        __bang_atomic_reduce_add(grad_input + gi_tl_offset + c_offset,
                          nram_output, c_slice);
      }
      if (topRightIsIn) {
        __bang_mul_scalar(nram_output + c_limit, nram_ping,
                          (1 - i_tl_x_weight) * i_tl_y_weight, c_limit);
        __bang_atomic_reduce_add(
            grad_input + gi_tr_offset + c_offset,
            nram_output + c_limit, c_slice);
      }
      if (bottomLeftIsIn) {
        __bang_mul_scalar(nram_output + 2 * c_limit, nram_ping,
                          i_tl_x_weight * (1 - i_tl_y_weight), c_limit);
        __bang_atomic_reduce_add(
            grad_input + gi_bl_offset + c_offset,
            nram_output + 2 * c_limit, c_slice);
      }
      if (bottomRightIsIn) {
        __bang_mul_scalar(nram_output + 3 * c_limit, nram_ping,
                          (1 - i_tl_x_weight) * (1 - i_tl_y_weight), c_limit);
        __bang_atomic_reduce_add(
            grad_input + gi_br_offset + c_offset,
            nram_output + 3 * c_limit, c_slice);
      }
      c_rem -= c_slice;
      c_offset += c_slice;
      swap(nram_ping, nram_pong);
      nram_output = nram_ping + c_limit;
      __sync();
    }
  }
}

mluOpStatus_t MLUOP_WIN_API KernelRoiCropForward(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *input, const void *grid, const int batch, const int height,
    const int width, const int channels, const int grid_n, const int output_h,
    const int output_w, void *output) {
  KERNEL_CHECK(MLUKernelRoiCropForward<<<k_dim, k_type, queue>>>(
      (float *)input, batch, height, width, channels, (float *)grid, grid_n,
      (float *)output, output_h, output_w));
  return MLUOP_STATUS_SUCCESS;
}

mluOpStatus_t MLUOP_WIN_API KernelRoiCropBackward(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *grad_output, const void *grid, const int batch,
    const int height, const int width, const int channels, const int grid_n,
    const int output_h, const int output_w, void *grad_input) {
  KERNEL_CHECK(MLUKernelRoiCropBackward<<<k_dim, k_type, queue>>>(
      (float *)grad_output, output_h, output_w, (float *)grid, grid_n,
      (float *)grad_input, batch, height, width, channels));
  return MLUOP_STATUS_SUCCESS;
}
