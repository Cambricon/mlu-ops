/*************************************************************************
 * Copyright (C) 2021 by Cambricon, Inc. All rights reserved.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/unary_op/unary_op_3pipeline.h"
#include "kernels/unary_op/unary_op_5pipeline.h"
#include "mlu_op_kernel.h"

#define LOG_LOW_BOUND 1e-8
#define LOG_SCALE 1e12
#define LOG_RECOVER -27.6310211159285482

#define LOG_NRAM_USED MAX_NRAM_SIZE
#define LOG_SRAM_USED (CORE_DIM * LOG_NRAM_USED)

__nram__ float nram_tmp[NFU_ALIGN_SIZE];
__nram__ char nram_buffer[LOG_NRAM_USED];
__mlu_shared__ char sram_buffer[LOG_SRAM_USED];

template <typename T>
__mlu_func__ void get3OffsetLogHighAcc(int32_t &offset_x_half,
                                       int32_t &offset_aux_a,
                                       int32_t &offset_aux_b, int32_t &num_deal,
                                       int32_t &num_pong) {
  // need 4 pingpong sapce.
  num_deal = FLOOR_ALIGN(LOG_NRAM_USED / sizeof(T) / 4, UNARY_ALIGN_NUM);
  num_pong = 2 * num_deal;
  offset_x_half = num_deal;
  offset_aux_a = 2 * num_pong;
  offset_aux_b = offset_aux_a;
}

template <typename T>
__mlu_func__ void get3OffsetLogFast(int32_t &offset_x_half,
                                    int32_t &offset_aux_a,
                                    int32_t &offset_aux_b, int32_t &num_deal,
                                    int32_t &num_pong) {
  if (sizeof(T) == sizeof(float)) {
    // need 2 auxiliary space and 2 pingpong sapce,
    // use 2 auxiliary space to expand input range for float data type.
    num_deal = FLOOR_ALIGN(LOG_NRAM_USED / sizeof(T) / 4, UNARY_ALIGN_NUM);
    num_pong = num_deal;
    offset_x_half = 0;
    offset_aux_a = 2 * num_pong;
    offset_aux_b = offset_aux_a + num_deal;
  } else {
    // need 2 pingpong sapce,
    num_deal = FLOOR_ALIGN(LOG_NRAM_USED / sizeof(T) / 2, UNARY_ALIGN_NUM);
    num_pong = num_deal;
    offset_x_half = 0;
    offset_aux_a = 2 * num_pong;
    offset_aux_b = offset_aux_a;
  }
}

template <typename T>
__mlu_func__ void computeLogFast(T *nram_x, T *nram_x_half, T *nram_aux_a,
                                 T *nram_aux_b, int deal_num, int actual_num,
                                 float coef) {
  if (sizeof(T) == sizeof(float)) {
    __bang_write_value((float *)nram_tmp, UNARY_ALIGN_NUM,
                       (float)LOG_LOW_BOUND);
    // scale x
    __bang_cycle_lt((float *)nram_aux_b, (float *)nram_x_half,
                    (float *)nram_tmp, deal_num, UNARY_ALIGN_NUM);
    __bang_mul_scalar(nram_aux_b, nram_aux_b, (float)LOG_SCALE, deal_num);
    __bang_cycle_gt((float *)nram_aux_a, (float *)nram_x_half,
                    (float *)nram_tmp, deal_num, UNARY_ALIGN_NUM);
    __bang_add(nram_aux_a, nram_aux_a, nram_aux_b, deal_num);

    // recover x
    __bang_cycle_lt((float *)nram_aux_b, (float *)nram_x_half,
                    (float *)nram_tmp, deal_num, UNARY_ALIGN_NUM);
    __bang_mul_scalar(nram_aux_b, nram_aux_b, (float)(LOG_RECOVER * coef),
                      deal_num);

    // log x
    __bang_mul(nram_x, nram_x_half, nram_aux_a, deal_num);
    __bang_active_loghp((T *)nram_x, (T *)nram_x, deal_num);
    __bang_mul_scalar(nram_x, nram_x, (T)coef, deal_num);
    __bang_add(nram_x, nram_x, nram_aux_b, deal_num);
  } else {
    __bang_active_loghp((T *)nram_x, (T *)nram_x, deal_num);
    __bang_mul_scalar(nram_x, nram_x, (T)coef, deal_num);
  }
}

template <typename T>
__mlu_func__ void get5OffsetLogHighAcc(int32_t &offset_x_half,
                                       int32_t &offset_aux_a,
                                       int32_t &offset_aux_b,
                                       int32_t &num_deal) {
  // need 2 nram space.
  int32_t num_nram_div = 2;
  num_deal = FLOOR_ALIGN(
      LOG_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div, UNARY_ALIGN_NUM);
  offset_x_half = num_deal;
  offset_aux_a = offset_x_half;
  offset_aux_b = offset_x_half;
}

template <typename T>
__mlu_func__ void get5OffsetLogFast(int32_t &offset_x_half,
                                    int32_t &offset_aux_a,
                                    int32_t &offset_aux_b, int32_t &num_deal) {
  int32_t num_nram_div = 1;
  if (sizeof(T) == sizeof(float)) {
    // need 2 auxiliary space to expand input range for float data type in
    // MLU200 series.
    num_nram_div = num_nram_div + 2;
    num_deal =
        FLOOR_ALIGN(LOG_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div,
                    UNARY_ALIGN_NUM);
    offset_x_half = 0;
    offset_aux_a = num_deal;
    offset_aux_b = offset_aux_a + num_deal;
  } else {
    // need 1 nram space.
    num_deal =
        FLOOR_ALIGN(LOG_SRAM_USED / 2 / CORE_DIM / sizeof(T) / num_nram_div,
                    UNARY_ALIGN_NUM);
    offset_x_half = 0;
    offset_aux_a = offset_x_half;
    offset_aux_b = offset_aux_a;
  }
}

template <typename T>
__mlu_func__ void computeLogHighAcc(T *nram_x, T *nram_x_half, T *nram_aux_a,
                                    T *nram_aux_b, int deal_num, int actual_num,
                                    float coef) {
  __bang_half2float((float *)nram_x, (half *)nram_x_half, deal_num);
  __bang_active_loghp((float *)nram_x, (float *)nram_x, deal_num);
  __bang_mul_scalar((float *)nram_x, (float *)nram_x, coef, deal_num);
  __bang_float2half_rd((half *)nram_x, (float *)nram_x, deal_num);
}

// function tion implementation
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Log, float, Fast);
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Log, half, Fast);
UNARY_OP_KERNEL_3PIPELINE_IMPLE(Log, half, HighAcc);

UNARY_OP_KERNEL_5PIPELINE_IMPLE(Log, float, Fast);
UNARY_OP_KERNEL_5PIPELINE_IMPLE(Log, half, Fast);
UNARY_OP_KERNEL_5PIPELINE_IMPLE(Log, half, HighAcc);

void MLUOP_WIN_API mluOpBlockKernel3StagePipelineLogHalfFast(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel3StagePipelineLoghalfFast<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}

void MLUOP_WIN_API mluOpBlockKernel3StagePipelineLogHalfHighAcc(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel3StagePipelineLoghalfHighAcc<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}

void MLUOP_WIN_API mluOpBlockKernel3StagePipelineLogFloatFast(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel3StagePipelineLogfloatFast<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}

void MLUOP_WIN_API mluOpBlockKernel5StagePipelineLogHalfFast(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel5StagePipelineLoghalfFast<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}

void MLUOP_WIN_API mluOpBlockKernel5StagePipelineLogHalfHighAcc(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel5StagePipelineLoghalfHighAcc<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}

void MLUOP_WIN_API mluOpBlockKernel5StagePipelineLogFloatFast(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const void *x, void *y, int num, float coef) {
  MLUBlockKernel5StagePipelineLogfloatFast<<<k_dim, k_type, queue>>>(
      (void *)x, (void *)y, num, coef);
}
