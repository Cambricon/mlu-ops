/*************************************************************************
 * Copyright (C) [2023] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "kernels/masked_im2col_forward/masked_im2col_forward.h"

#include "core/logging.h"
#include "kernels/utils/common.h"

template <typename T>
__mlu_func__ void MLUMultiKernelMaskedIm2colForward(
    const T *feature, const int height, const int width, const int channels,
    const int kernel_h, const int kernel_w, const int pad_h, const int pad_w,
    const int32_t *mask_h_idx, const int32_t *mask_w_idx, const int mask_cnt,
    T *data_col) {
  for (int index = taskId; index < mask_cnt; index += taskDim) {
    const int h_col = mask_h_idx[index];
    const int w_col = mask_w_idx[index];
    const int h_offset = h_col - pad_h;
    const int w_offset = w_col - pad_w;
    int h_start = h_offset;
    int h_end = h_offset + kernel_h - 1;
    int w_start = w_offset;
    int w_end = w_start + kernel_w - 1;
    if (h_start >= height || w_start >= width || h_end < 0 || w_end < 0) {
      continue;
    } else {
      int h_start_valid = __mluop_max(0, h_start);
      int h_end_valid = __mluop_min(height - 1, h_end);
      int w_start_valid = __mluop_max(0, w_start);
      int w_end_valid = __mluop_min(width - 1, w_end);
      __memcpy(
          data_col + index * kernel_h * kernel_w * channels +
              ((h_start_valid - h_start) * kernel_w +
               (w_start_valid - w_start)) *
                  channels,
          feature + h_start_valid * width * channels + w_start_valid * channels,
          (w_end_valid - w_start_valid + 1) * channels * sizeof(T), GDRAM2GDRAM,
          kernel_w * channels * sizeof(T), width * channels * sizeof(T),
          h_end_valid - h_start_valid);
    }
  }
}

__mlu_entry__ void MLUUnion1MaskedIm2colForward(
    const mluOpDataType_t data_dtype, const void *feature, const int height,
    const int width, const int channels, const int kernel_h, const int kernel_w,
    const int pad_h, const int pad_w, const void *mask_h_idx,
    const void *mask_w_idx, const int mask_cnt, void *data_col) {
  if (__is_mpu()) {
    return;
  }

  switch (data_dtype) {
    case MLUOP_DTYPE_HALF: {
      MLUMultiKernelMaskedIm2colForward(
          (half *)feature, height, width, channels, kernel_h, kernel_w, pad_h,
          pad_w, (int32_t *)mask_h_idx, (int32_t *)mask_w_idx, mask_cnt,
          (half *)data_col);
    }; break;
    case MLUOP_DTYPE_FLOAT: {
      MLUMultiKernelMaskedIm2colForward(
          (float *)feature, height, width, channels, kernel_h, kernel_w, pad_h,
          pad_w, (int32_t *)mask_h_idx, (int32_t *)mask_w_idx, mask_cnt,
          (float *)data_col);
    }; break;
    default:
      break;
  }
}

mluOpStatus_t MLUOP_WIN_API KernelMaskedIm2colForward(
    cnrtDim3_t k_dim, cnrtFunctionType_t k_type, cnrtQueue_t queue,
    const mluOpDataType_t data_dtype, const void *feature, const int height,
    const int width, const int channels, const int kernel_h, const int kernel_w,
    const int pad_h, const int pad_w, const void *mask_h_idx,
    const void *mask_w_idx, const int mask_cnt, void *data_col) {
  KERNEL_CHECK(MLUUnion1MaskedIm2colForward<<<k_dim, k_type, queue>>>(
      data_dtype, feature, height, width, channels, kernel_h, kernel_w, pad_h,
      pad_w, mask_h_idx, mask_w_idx, mask_cnt, data_col));
  return MLUOP_STATUS_SUCCESS;
}
